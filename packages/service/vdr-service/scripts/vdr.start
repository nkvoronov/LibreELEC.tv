#!/bin/sh

################################################################################
#      This file is part of OpenELEC - http://www.openelec.tv
#      Copyright (C) 2009-2012 Stephan Raue (stephan@openelec.tv)
#
#  This Program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2, or (at your option)
#  any later version.
#
#  This Program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with OpenELEC.tv; see the file COPYING.  If not, write to
#  the Free Software Foundation, 51 Franklin Street, Suite 500, Boston, MA 02110, USA.
#  http://www.gnu.org/copyleft/gpl.html
################################################################################

. /etc/profile

CONFIG_CACHE="/storage/.cache"
VDR_TYPE="none"
VDR_ARG=""
CONF_FILE=$CONFIG_CACHE/services/vdr.conf

if [ -f $CONFIG_CACHE/services/dvb.conf ]; then
  . $CONFIG_CACHE/services/dvb.conf
fi

################################################################################

fix_config() {

  if [ -f "$VDR_HOME/setup.conf" ]; then
    sed -i -e '/^$/d' $VDR_HOME/setup.conf
    sed -i -e '/^AlwaysSortFoldersFirst.*$/d' $VDR_HOME/setup.conf
    sed -i -e '/^SetSystemTime.*$/d' $VDR_HOME/setup.conf
    sed -i -e '/^epgsearch.SVDRPPort.*$/d' $VDR_HOME/setup.conf
  fi
  cat >>$VDR_HOME/setup.conf << MYDATA
AlwaysSortFoldersFirst = 1
SetSystemTime = 0
epgsearch.SVDRPPort = 6419
MYDATA

}

stop_tv_backend() {

  if [ -f $CONFIG_CACHE/services/vdr.conf ]; then
    systemctl stop vdr.service
    while systemctl is-active vdr.service &>/dev/null ; do
      sleep 1
    done
  fi

  if [ -f $CONFIG_CACHE/services/tvheadend.conf ]; then
    systemctl stop tvheadend.service
    while systemctl is-active tvheadend.service &>/dev/null ; do
      sleep 1
    done
  fi

}

init_vdr_plugins() {

  if [ "$VDR_DEBUG" == "true" ]; then
    VDR_ARG="$VDR_ARG --log=3"
  else
    VDR_ARG="$VDR_ARG --log=1"
  fi

  if [ "$VDR_TYPE" != "none" ]; then
    LIRC_PATH="/run/lirc/lircd"
    VDR_ARG="$VDR_ARG -s /usr/bin/vdr-poweroff --vfat --watchdog=60 --lirc=$LIRC_PATH"
  else
    VDR_ARG="$VDR_ARG --no-kbd"
  fi

  SVDRP_PORT=0

  # epgsearch needs svdrp
  if [ "$VDR_ENABLE_EPGSEARCH" == "true" ]; then
    SVDRP_PORT=6419
  fi

  VDR_ARG="$VDR_ARG --port=$SVDRP_PORT"
  VDR_ARG="$VDR_ARG --config=$VDR_HOME"
  VDR_ARG="$VDR_ARG --resdir=$VDR_HOME"
  VDR_ARG="$VDR_ARG --cachedir=$VDR_CACHE_DIR"
  VDR_ARG="$VDR_ARG --lib=$VDR_PLUGIN_DIR"
  VDR_ARG="$VDR_ARG --video=\"$VDR_VIDEO_DIR\""

  if [ "$VDR_ENABLE_EXTERNAL_RECCMD" == "true" ]; then
    if [ ! -z "$VDR_EXTERNAL_RECCMD_PATH" -a -x "$VDR_EXTERNAL_RECCMD_PATH" ] ; then
      VDR_ARG="$VDR_ARG -r \"$VDR_EXTERNAL_RECCMD_PATH\""
    fi
  fi

  if [ "$VDR_ENABLE_CHARSET_OVERRIDE" == "true" ]; then
    if [ ! -z "$VDR_CHARSET_OVERRIDE_STR" ] ; then
      VDR_CHARSET_OVERRIDE="$VDR_CHARSET_OVERRIDE_STR"
    fi
  fi

  # keep softcam first
  if [ "$VDR_ENABLE_SOFTCAM" == "true" ]; then
    VDR_ARG="$VDR_ARG -P 'dvbapi $VDR_DVBAPI_OPTION'"
  fi

  if [ "$VDR_ENABLE_WIRBELSCAN" == "true" ]; then
    VDR_ARG="$VDR_ARG -P wirbelscan -P wirbelscancontrol"
  fi

  if [ "$VDR_ENABLE_IPTV" == "true" ]; then
    VDR_ARG="$VDR_ARG -P 'iptv -d $VDR_IPTV_NUM_DEVICES'"
  fi

  if [ "$VDR_ENABLE_STREAMDEV_SERVER" == "true" ]; then
    VDR_ARG="$VDR_ARG -P streamdev-server"
  fi

  if [ "$VDR_ENABLE_STREAMDEV_CLIENT" == "true" ]; then
    VDR_ARG="$VDR_ARG -P streamdev-client"
  fi

  if [ "$VDR_ENABLE_LIVE" == "true" ]; then
    VDR_ARG="$VDR_ARG -P 'live -i $VDR_LIVE_IP -p $VDR_LIVE_PORT'"
  fi

  VDR_ENABLE_EEPG="false"

  if [ "$VDR_ENABLE_EEPG" == "true" ]; then
    VDR_ARG="$VDR_ARG -P eepg"
  fi

  if [ "$VDR_ENABLE_EPGFIXER" == "true" ]; then
    VDR_ARG="$VDR_ARG -P epgfixer"
  fi

  if [ "$VDR_ENABLE_EPGSEARCH" == "true" ]; then
    VDR_ARG="$VDR_ARG -P epgsearch -P epgsearchonly -P quickepgsearch -P conflictcheckonly"
  fi

  if [ "$VDR_ENABLE_DUMMYDEVICE" == "true" ]; then
    VDR_ARG="$VDR_ARG -P dummydevice"
  fi

  if [ "$VDR_ENABLE_SATIP" == "true" ]; then
    VDR_ARG="$VDR_ARG -P satip"
  fi

  if [ "$VDR_ENABLE_XMLTV2VDR" == "true" ]; then
    VDR_ARG="$VDR_ARG -P 'xmltv2vdr --epgfile=$VDR_CACHE_DIR/epg.db'"
    # xmltv2vdr needs /var/run/vdr
    grep -q " /var/run/vdr " /proc/mounts || ( mkdir -p /var/run/vdr && mount -t tmpfs -o size=10% tmpfs /var/run/vdr )
    #handle epgsources
    mkdir -p /var/lib/epgsources
    mkdir -p $HOME/epgsources
    for source in `find $VDR_HOME/epgsources -type f`; do
      if [ ! -e $HOME/epgsources/`basename $source` ]; then
        cp $source $HOME/epgsources/
      fi
    done
    for source in `find $HOME/epgsources -type f`; do
      cp $source /var/lib/epgsources
    done
  fi

  if [ "$VDR_ENABLE_RESTFULAPI" == "true" ]; then
    VDR_RESTFULAPI_ARGS="--ip $VDR_RESTFULAPI_IP --port $VDR_RESTFULAPI_PORT"
    VDR_RESTFULAPI_EPGIMAGES="$VDR_HOME/plugins/restfulapi/epgimages"
    mkdir -p $VDR_RESTFULAPI_EPGIMAGES
    VDR_RESTFULAPI_ARGS="$VDR_RESTFULAPI_ARGS --epgimages=\"$VDR_RESTFULAPI_EPGIMAGES\""
    VDR_RESTFULAPI_CHANNELLOGOS="$VDR_HOME/plugins/restfulapi/channellogos"
    mkdir -p $VDR_RESTFULAPI_CHANNELLOGOS
    VDR_RESTFULAPI_ARGS="$VDR_RESTFULAPI_ARGS --channellogos=\"$VDR_RESTFULAPI_CHANNELLOGOS\""
    VDR_RESTFULAPI_WEBAPP="$VDR_HOME/plugins/restfulapi/webapp"
    mkdir -p $VDR_RESTFULAPI_WEBAPP
    VDR_RESTFULAPI_ARGS="$VDR_RESTFULAPI_ARGS --webapp=\"$VDR_RESTFULAPI_WEBAPP\""
    VDR_ARG="$VDR_ARG -P 'restfulapi $VDR_RESTFULAPI_ARGS'"
  fi

  if [ "$VDR_ENABLE_DDCI2" == "true" ]; then
    VDR_ARG="$VDR_ARG -P ddci2"
  fi

  if [ "$VDR_ENABLE_DYNAMITE" == "true" ]; then
    VDR_ARG="$VDR_ARG -P dynamite"
  fi

  if [ "$VDR_ENABLE_ROBOTV" == "true" ]; then
    VDR_ARG="$VDR_ARG -P robotv"
  fi

  # vnsi last
  if [ "$VDR_TYPE" == "none" ]; then
    VDR_ARG="$VDR_ARG -P $PVR_PLUGIN"
  fi
}

init_vdr_front_plugins() {

  if [ "$VDR_ENABLE_CHANNELLISTS" == "true" ]; then
    VDR_ARG="$VDR_ARG -P channellists"
  fi

  if [ "$VDR_ENABLE_FAVORITES" == "true" ]; then
    VDR_ARG="$VDR_ARG -P favorites"
  fi

  if [ "$VDR_ENABLE_FEMON" == "true" ]; then
    VDR_ARG="$VDR_ARG -P femon"
  fi

  if [ "$VDR_ENABLE_FILEBROWSER" == "true" ]; then
    VDR_ARG="$VDR_ARG -P filebrowser"
  fi

  if [ "$VDR_ENABLE_IMONLCD" == "true" ]; then
    VDR_ARG="$VDR_ARG -P imonlcd"
  fi

  if [ "$VDR_ENABLE_LCDPROC" == "true" ]; then
    VDR_ARG="$VDR_ARG -P lcdproc"
  fi

  if [ "$VDR_ENABLE_MENUORG" == "true" ]; then
    VDR_ARG="$VDR_ARG -P menuorg"
  fi

  if [ "$VDR_ENABLE_PIN" == "true" ]; then
    VDR_ARG="$VDR_ARG -P pin"
  fi

  if [ "$VDR_ENABLE_SKINDESIGNER" == "true" ]; then
    VDR_ARG="$VDR_ARG -P skindesigner"
  fi

  if [ "$VDR_ENABLE_SKINFLAT" == "true" ]; then
    VDR_ARG="$VDR_ARG -P skinflat"
  fi

  if [ "$VDR_ENABLE_SKINNOPACITY" == "true" ]; then
    VDR_ARG="$VDR_ARG -P skinnopacity"
  fi

  if [ "$VDR_ENABLE_SKINFLAT_PLUS" == "true" ]; then
    VDR_ARG="$VDR_ARG -P skinflatplus"
  fi

  if [ "$VDR_ENABLE_SLEEPTIMER" == "true" ]; then
    VDR_ARG="$VDR_ARG -P sleeptimer"
  fi

  if [ "$VDR_ENABLE_SYSTEMINFO" == "true" ]; then
    VDR_SYSTEMINFO_SCRIPT="$VDR_HOME/plugins/systeminfo/systeminfo.sh"
    VDR_ARG="$VDR_ARG -P 'systeminfo -s $VDR_SYSTEMINFO_SCRIPT'"
  fi

  if [ "$VDR_ENABLE_TEXT2SKIN" == "true" ]; then
    VDR_ARG="$VDR_ARG -P text2skin"
  fi

  VDR_ENABLE_TVGUIDE="false"

  if [ "$VDR_ENABLE_TVGUIDE" == "true" ]; then
    VDR_ARG="$VDR_ARG -P tvguide"
  fi

  if [ "$VDR_ENABLE_TVGUIDENG" == "true" -a "$VDR_ENABLE_SKINDESIGNER" == "true" ]; then
    VDR_ARG="$VDR_ARG -P tvguideng"
  fi

  if [ "$VDR_ENABLE_TVSCRAPER" == "true" ]; then
    VDR_ARG="$VDR_ARG -P tvscraper"
  fi

  if [ "$VDR_ENABLE_WEATHERFORECAST" == "true" -a "$VDR_ENABLE_SKINDESIGNER" == "true" ]; then
    VDR_ARG="$VDR_ARG -P weatherforecast"
  fi

}

init_vdr_soft() {

  if [ "$VDR_OUTPUT_VIDEO" == "auto" ]; then
    VDR_ARG="$VDR_ARG -P 'softhddevice -a $VDR_SOUND_SOFT $VDR_SOFT_PARAM'"
  elif [ "$VDR_OUTPUT_VIDEO" == "vdpau" ]; then
    VDR_ARG="$VDR_ARG -P 'softhddevice -v vdpau -a $VDR_SOUND_SOFT $VDR_SOFT_PARAM'"
  else
    VDR_ARG="$VDR_ARG -P 'softhddevice -v va-api -a $VDR_SOUND_SOFT $VDR_SOFT_PARAM'"
  fi
}

init_vdr_xine() {

  if [ $(pidof vdr-sxfe) ]; then
    killall -9 vdr-sxfe  > /dev/null 2>&1
    while [ $(pidof vdr-sxfe) ]; do
      sleep 1
    done
  fi

  VDR_XINE_CONFIG="$HOME/.config/xine/config_xineliboutput"

  if [ "$VDR_OUTPUT_VIDEO" == "auto" ]; then
    VDR_ARG="$VDR_ARG -P 'xineliboutput -c --local=sxf --video=auto --config=$VDR_XINE_CONFIG --audio=$VDR_SOUND_XINE $VDR_XINE_PARAM'"
  elif [ "$VDR_OUTPUT_VIDEO" == "vdpau" ]; then
    VDR_ARG="$VDR_ARG -P 'xineliboutput -c --local=sxf --video=vdpau --config=$VDR_XINE_CONFIG --audio=$VDR_SOUND_XINE $VDR_XINE_PARAM'"
  else
        VDR_ARG="$VDR_ARG -P 'xineliboutput -c --local=sxf --video=vaapi --config=$VDR_XINE_CONFIG --audio=$VDR_SOUND_XINE $VDR_XINE_PARAM'"
  fi
}

################################################################################

LOG_VDR="/var/log/vdr.log"
VDR_HOME="$HOME/.config/vdr"
VDR_PLUGIN_DIR="/usr/lib/vdr"
VDR_CACHE_DIR="$HOME/.cache/vdr"

if [ "$1" != "" ]; then
  VDR_TYPE=$1
  CONF_FILE=$CONFIG_CACHE/services/vdr-front.conf
fi

if [ ! -f "$VDR_CACHE_DIR" ]; then
  mkdir -p $VDR_CACHE_DIR
fi

mkdir -p $VDR_HOME

VDR_ARG="-g /tmp"

if [ -f $CONF_FILE ]; then

  . $CONF_FILE

  if [ "$VDR_TYPE" != "none" ]; then
    stop_tv_backend
  fi

  mkdir -p "$VDR_VIDEO_DIR"

  echo  "Starting vdr service ..."

  init_vdr_plugins

  if [ "$VDR_TYPE" != "none" ]; then
    init_vdr_front_plugins

    if [ "$VDR_FRONT" == "soft" ]; then
      init_vdr_soft
    elif [ "$VDR_FRONT" == "xine" ]; then
      init_vdr_xine
    else
      exit
    fi
  fi

  # start userspace DVB driver/addon
  for driver_dvb in $(find /storage/.xbmc/addons/driver.dvb.*/bin/userspace-driver.sh -type f 2>/dev/null); do
    driver_dvb_name=$(echo $driver_dvb | awk 'BEGIN {FS="/"} {printf("%s", $5)}')
    . $driver_dvb
  done

  [ "$DVB_NUM_ADAPTERS" == "" ] && DVB_NUM_ADAPTERS=1
  [ $DVB_NUM_ADAPTERS -lt 1 ] && DVB_NUM_ADAPTERS=1

  if [ "$DVB_WAIT_FOR_FEINIT" == "true" ]; then
    while [ true ]; do
      if [ -e /dev/dvb/adapter$((DVB_NUM_ADAPTERS-1))/frontend0 ]; then
        break
      fi
      sleep 1
    done
  fi

  fix_config

  if [ "$VDR_TYPE" != "none" ]; then
    eval DISPLAY=:0.0 LANG=en_US.UTF-8 VDR_CHARSET_OVERRIDE="$VDR_CHARSET_OVERRIDE" exec vdr.bin $VDR_ARG &>$LOG_VDR
  else
    eval LANG=en_US.UTF-8 VDR_CHARSET_OVERRIDE="$VDR_CHARSET_OVERRIDE" exec vdr.bin $VDR_ARG &>$LOG_VDR
  fi
fi
