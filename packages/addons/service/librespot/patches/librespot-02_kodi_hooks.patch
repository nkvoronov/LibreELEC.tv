From ddb20957330b2bb76c0cee85ac3514e5e136b90e Mon Sep 17 00:00:00 2001
From: awiouy <awiouy@gmail.com>
Date: Fri, 26 Jan 2018 21:02:29 +0100
Subject: [PATCH] kodi hooks

---
 playback/src/player.rs | 25 +++++++++++++++++--------
 1 file changed, 17 insertions(+), 8 deletions(-)

diff --git a/playback/src/player.rs b/playback/src/player.rs
index e549736..34e802a 100644
--- a/playback/src/player.rs
+++ b/playback/src/player.rs
@@ -3,6 +3,7 @@ use futures::{future, Future};
 use std;
 use std::borrow::Cow;
 use std::io::{Read, Seek, SeekFrom, Result};
+use std::env;
 use std::mem;
 use std::process::Command;
 use std::sync::mpsc::{RecvError, TryRecvError, RecvTimeoutError};
@@ -16,7 +17,7 @@ use core::spotify_id::SpotifyId;
 use audio_backend::Sink;
 use audio::{AudioFile, AudioDecrypt};
 use audio::{VorbisDecoder, VorbisPacket};
-use metadata::{FileFormat, Track, Metadata};
+use metadata::{Artist, FileFormat, Track, Metadata};
 use mixer::AudioFilter;
 
 pub struct Player {
@@ -274,7 +275,7 @@ impl PlayerInternal {
 
             None => {
                 self.stop_sink();
-                self.run_onstop();
+                info!("onstop 1");
 
                 let old_state = mem::replace(&mut self.state, PlayerState::Stopped);
                 old_state.signal_end_of_track();
@@ -286,6 +287,12 @@ impl PlayerInternal {
         debug!("command={:?}", cmd);
         match cmd {
             PlayerCommand::Load(track_id, play, position, end_of_track) => {
+                let track = Track::get(&self.session, track_id).wait().unwrap();
+                let artist = Artist::get(&self.session, track.artists[0]).wait().unwrap();
+                env::set_var("LS_ARTIST", artist.name);
+                env::set_var("LS_TITLE", track.name);
+                self.run_onstart();
+
                 if self.state.is_playing() {
                     self.stop_sink_if_running();
                 }
@@ -294,7 +301,7 @@ impl PlayerInternal {
                     Some(decoder) => {
                         if play {
                             if !self.state.is_playing() {
-                                self.run_onstart();
+                                info!("onstart 1");
                             }
                             self.start_sink();
 
@@ -304,7 +311,7 @@ impl PlayerInternal {
                             };
                         } else {
                             if self.state.is_playing() {
-                                self.run_onstop();
+                                info!("onstop 2");
                             }
 
                             self.state = PlayerState::Paused {
@@ -317,7 +324,7 @@ impl PlayerInternal {
                     None => {
                         let _ = end_of_track.send(());
                         if self.state.is_playing() {
-                            self.run_onstop();
+                            info!("onstop 3");
                         }
                     }
                 }
@@ -338,7 +345,7 @@ impl PlayerInternal {
                 if let PlayerState::Paused { .. } = self.state {
                     self.state.paused_to_playing();
 
-                    self.run_onstart();
+                    info!("onstart 2");
                     self.start_sink();
                 } else {
                     warn!("Player::play called from invalid state");
@@ -350,17 +357,19 @@ impl PlayerInternal {
                     self.state.playing_to_paused();
 
                     self.stop_sink_if_running();
-                    self.run_onstop();
+                    info!("onstop 4");
                 } else {
                     warn!("Player::pause called from invalid state");
                 }
             }
 
             PlayerCommand::Stop => {
+                self.run_onstop();
+
                 match self.state {
                     PlayerState::Playing { .. } => {
                         self.stop_sink_if_running();
-                        self.run_onstop();
+                        info!("onstop 5");
                         self.state = PlayerState::Stopped;
                     }
                     PlayerState::Paused { .. } => {
