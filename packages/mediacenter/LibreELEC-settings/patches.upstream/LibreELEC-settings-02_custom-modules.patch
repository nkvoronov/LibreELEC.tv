diff -Naur a/src/resources/lib/modules/transmission.py b/src/resources/lib/modules/transmission.py
--- a/src/resources/lib/modules/transmission.py	1970-01-01 03:00:00.000000000 +0300
+++ b/src/resources/lib/modules/transmission.py	2019-08-08 03:26:30.450264116 +0300
@@ -0,0 +1,328 @@
+################################################################################
+#      This file is part of OpenELEC - http://www.openelec.tv
+#      Copyright (C) 2009-2016 Stephan Raue (stephan@openelec.tv)
+#      Copyright (C) 2013 Lutz Fiebach (lufie@openelec.tv)
+#
+#  This program is dual-licensed; you can redistribute it and/or modify
+#  it under the terms of the GNU General Public License as published by
+#  the Free Software Foundation; either version 2 of the License, or
+#  (at your option) any later version.
+#
+#  This Program is distributed in the hope that it will be useful,
+#  but WITHOUT ANY WARRANTY; without even the implied warranty of
+#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+#  GNU General Public License for more details.
+#
+#  You should have received a copy of the GNU General Public License
+#  along with OpenELEC; see the file COPYING.  If not, see
+#  <http://www.gnu.org/licenses/>.
+#
+#  Alternatively, you can license this library under a commercial license,
+#  please contact OpenELEC Licensing for more information.
+#
+#  For more information contact:
+#  OpenELEC Licensing  <license@openelec.tv>  http://www.openelec.tv
+################################################################################
+# -*- coding: utf-8 -*-
+import os
+import glob
+
+class transmission:
+
+    ENABLED = False
+    TRANSMISSION_DAEMON = None
+    TRANSMISSION_DAEMON_START = None
+    D_TRANSMISSION_SECURE = None
+    D_TRANSMISSION_USERNAME = None
+    D_TRANSMISSION_PASSWORD = None
+    D_TRANSMISSION_IP = None
+    D_TRANSMISSION_LIMIT_GLOBAL = None
+    D_TRANSMISSION_LIMIT_TORRENT = None
+    D_TRANSMISSION_DL_DIR = None
+    menu = {'9': {
+        'name': 33000,
+        'menuLoader': 'load_menu',
+        'listTyp': 'list',
+        'InfoText': 800,
+        }
+    }
+
+    def __init__(self, oeMain):
+        try:
+            oeMain.dbg_log('transmission::__init__', 'enter_function', 0)
+
+            self.oe = oeMain
+
+            self.struct = {
+                'transmission': {
+                    'order': 1,
+                    'name': 33001,
+                    'not_supported': [],
+                    'settings': {
+                        'transmission_autostart': {
+                            'order': 1,
+                            'name': 33002,
+                            'value': '0',
+                            'action': 'initialize_transmission',
+                            'type': 'bool',
+                            'InfoText': 801,
+                        },
+                        'transmission_secure': {
+                            'order': 2,
+                            'name': 33003,
+                            'value': '1',
+                            'action': 'initialize_transmission',
+                            'type': 'bool',
+                            'parent': {'entry': 'transmission_autostart','value': ['1']},
+                            'InfoText': 802,
+                        },
+                        'transmission_username': {
+                            'order': 3,
+                            'name': 33004,
+                            'value': 'libreelec',
+                            'action': 'initialize_transmission',
+                            'type': 'text',
+                            'parent': {'entry': 'transmission_secure','value': ['1']},
+                            'InfoText': 803,
+                        },
+                        'transmission_password': {
+                            'order': 4,
+                            'name': 33005,
+                            'value': 'libreelec',
+                            'action': 'initialize_transmission',
+                            'type': 'text',
+                            'parent': {'entry': 'transmission_secure','value': ['1']},
+                            'InfoText': 804,
+                        },
+                        'transmission_ip': {
+                            'order': 5,
+                            'name': 33006,
+                            'value': '*.*.*.*',
+                            'action': 'initialize_transmission',
+                            'type': 'text',
+                            'parent': {'entry': 'transmission_autostart','value': ['1']},
+                            'InfoText': 805,
+                        },
+                        'transmission_limit_global': {
+                            'order': 6,
+                            'name': 33007,
+                            'value': '100',
+                            'action': 'initialize_transmission',
+                            'type': 'num',
+                            'parent': {'entry': 'transmission_autostart','value': ['1']},
+                            'InfoText': 806,
+                        },
+                        'transmission_limit_torrent': {
+                            'order': 7,
+                            'name': 33008,
+                            'value': '100',
+                            'action': 'initialize_transmission',
+                            'type': 'num',
+                            'parent': {'entry': 'transmission_autostart','value': ['1']},
+                            'InfoText': 807,
+                        },
+                        'transmission_dl_dir': {
+                            'order': 8,
+                            'name': 33009,
+                            'value': '/storage/downloads/',
+                            'action': 'initialize_transmission',
+                            'type': 'folder',
+                            'parent': {'entry': 'transmission_autostart','value': ['1']},
+                            'InfoText': 808,
+                        },
+                    }
+                },
+            }
+
+            self.oe.dbg_log('transmission::__init__', 'exit_function', 0)
+
+        except Exception, e:
+            self.oe.dbg_log('transmission::__init__', 'ERROR: (' + repr(e) + ')')
+
+    def start_service(self):
+        try:
+            self.oe.dbg_log('transmission::start_service', 'enter_function', 0)
+            self.load_values()
+            self.initialize_transmission(service=1)
+            self.oe.dbg_log('transmission::start_service', 'exit_function', 0)
+
+        except Exception, e:
+            self.oe.dbg_log('transmission::start_service', 'ERROR: (%s)' % repr(e))
+
+    def stop_service(self):
+        try:
+            self.oe.dbg_log('transmission::stop_service', 'enter_function', 0)
+            self.oe.dbg_log('transmission::stop_service', 'exit_function', 0)
+
+        except Exception, e:
+            self.oe.dbg_log('transmission::stop_service', 'ERROR: (' + repr(e) + ')')
+
+    def do_init(self):
+        try:
+            self.oe.dbg_log('transmission::do_init', 'exit_function', 0)
+            self.load_values()
+            self.oe.dbg_log('transmission::do_init', 'exit_function', 0)
+
+        except Exception, e:
+            self.oe.dbg_log('transmission::do_init', 'ERROR: (%s)' % repr(e))
+
+    def set_value(self, listItem):
+        try:
+            self.oe.dbg_log('transmission::set_value', 'enter_function', 0)
+            self.struct[listItem.getProperty('category')]['settings'][listItem.getProperty('entry')]['value'] = listItem.getProperty('value')
+            self.oe.dbg_log('transmission::set_value', 'exit_function', 0)
+
+        except Exception, e:
+            self.oe.dbg_log('transmission::set_value', 'ERROR: (' + repr(e)  + ')')
+
+    def load_menu(self, focusItem):
+        try:
+            self.oe.dbg_log('transmission::load_menu', 'enter_function', 0)
+            self.oe.winOeMain.build_menu(self.struct)
+            self.oe.dbg_log('transmission::load_menu', 'exit_function', 0)
+
+        except Exception, e:
+            self.oe.dbg_log('transmission::load_menu', 'ERROR: (%s)' % repr(e))
+
+    def load_values(self):
+        try:
+            self.oe.dbg_log('transmission::load_values', 'enter_function', 0)
+
+            if os.path.isfile(self.TRANSMISSION_DAEMON_START) and os.path.isfile(self.TRANSMISSION_DAEMON):
+
+                self.struct['transmission']['settings']['transmission_autostart']['value'] = \
+                self.oe.get_service_state('transmission')
+
+                self.struct['transmission']['settings']['transmission_secure']['value'] = \
+                self.oe.get_service_option('transmission', 'TRANSMISSION_SECURE', self.D_TRANSMISSION_SECURE).replace('true','1').replace('false','0').replace('"', '')
+
+                self.struct['transmission']['settings']['transmission_username']['value'] = \
+                self.oe.get_service_option('transmission', 'TRANSMISSION_USERNAME', self.D_TRANSMISSION_USERNAME).replace('"', '')
+
+                self.struct['transmission']['settings']['transmission_password']['value'] = \
+                self.oe.get_service_option('transmission', 'TRANSMISSION_PASSWORD', self.D_TRANSMISSION_PASSWORD).replace('"', '')
+
+                self.struct['transmission']['settings']['transmission_ip']['value'] = \
+                self.oe.get_service_option('transmission', 'TRANSMISSION_IP', self.D_TRANSMISSION_IP).replace('"', '')
+
+                self.struct['transmission']['settings']['transmission_limit_global']['value'] = \
+                self.oe.get_service_option('transmission', 'TRANSMISSION_LIMIT_GLOBAL', self.D_TRANSMISSION_LIMIT_GLOBAL).replace('"', '')
+
+                self.struct['transmission']['settings']['transmission_limit_torrent']['value'] = \
+                self.oe.get_service_option('transmission', 'TRANSMISSION_LIMIT_TORRENT', self.D_TRANSMISSION_LIMIT_TORRENT).replace('"', '')
+
+                self.struct['transmission']['settings']['transmission_dl_dir']['value'] = \
+                self.oe.get_service_option('transmission', 'TRANSMISSION_DL_DIR', self.D_TRANSMISSION_DL_DIR).replace('"', '')
+
+            else:
+                self.struct['transmission']['hidden'] = 'true'
+
+            self.oe.dbg_log('transmission::load_values', 'exit_function', 0)
+
+        except Exception, e:
+            self.oe.dbg_log('transmission::load_values', 'ERROR: (%s)'  % repr(e))
+
+    def initialize_transmission(self, **kwargs):
+        try:
+            self.oe.dbg_log('transmission::initialize_transmission', 'enter_function', 0)
+
+            self.oe.set_busy(1)
+
+            if 'listItem' in kwargs:
+                self.set_value(kwargs['listItem'])
+
+            options = {}
+
+            if self.struct['transmission']['settings']['transmission_autostart']['value'] == '1':
+
+                state = 1
+
+                if 'hidden' in self.struct['transmission']['settings']['transmission_username']:
+                    del self.struct['transmission']['settings']['transmission_username']['hidden']
+
+                if 'hidden' in self.struct['transmission']['settings']['transmission_password']:
+                    del self.struct['transmission']['settings']['transmission_password']['hidden']
+
+                if self.struct['transmission']['settings']['transmission_secure']['value'] == '1':
+                    val = 'true'
+                else:
+                    val = 'false'
+
+                options['TRANSMISSION_SECURE']   = '"%s"' % val
+                options['TRANSMISSION_USERNAME'] = '"%s"' % self.struct['transmission']['settings']['transmission_username']['value']
+                options['TRANSMISSION_PASSWORD'] = '"%s"' % self.struct['transmission']['settings']['transmission_password']['value']
+                options['TRANSMISSION_IP'] = '"%s"' % self.struct['transmission']['settings']['transmission_ip']['value']
+                options['TRANSMISSION_LIMIT_GLOBAL'] = '"%s"' % self.struct['transmission']['settings']['transmission_limit_global']['value']
+                options['TRANSMISSION_LIMIT_TORRENT'] = '"%s"' % self.struct['transmission']['settings']['transmission_limit_torrent']['value']
+                options['TRANSMISSION_DL_DIR'] = '"%s"' % self.struct['transmission']['settings']['transmission_dl_dir']['value']
+
+            else:
+
+                state = 0
+
+                self.struct['transmission']['settings']['transmission_username']['hidden'] = True
+                self.struct['transmission']['settings']['transmission_password']['hidden'] = True
+
+            self.oe.set_service('transmission', options, state)
+
+            self.load_values()
+
+            self.oe.set_busy(0)
+
+            self.oe.dbg_log('transmission::initialize_transmission', 'exit_function', 0)
+
+        except Exception, e:
+            self.oe.set_busy(0)
+            self.oe.dbg_log('transmission::initialize_transmission', 'ERROR: (%s)' % repr(e), 4)
+
+    def exit(self):
+        try:
+            self.oe.dbg_log('transmission::exit', 'enter_function', 0)
+            self.oe.dbg_log('transmission::exit', 'exit_function', 0)
+
+        except Exception, e:
+            self.oe.dbg_log('transmission::exit', 'ERROR: (%s)' % repr(e), 4)
+
+    def do_wizard(self):
+        try:
+            self.oe.dbg_log('transmission::do_wizard', 'enter_function', 0)
+            self.oe.winOeMain.set_wizard_title(self.oe._(33000))
+            self.oe.winOeMain.set_wizard_text(self.oe._(33010))
+            self.oe.winOeMain.set_wizard_button_title(self.oe._(33001))
+            self.set_wizard_buttons()
+            self.oe.dbg_log('transmission::do_wizard', 'exit_function', 0)
+
+        except Exception, e:
+            self.oe.dbg_log('transmission::do_wizard', 'ERROR: (%s)' % repr(e))
+
+    def set_wizard_buttons(self):
+        try:
+            self.oe.dbg_log('transmission::set_wizard_buttons', 'enter_function', 0)
+
+            if self.struct['transmission']['settings']['transmission_autostart']['value'] == '1':
+                self.oe.winOeMain.set_wizard_radiobutton_2(self.oe._(33000), self, 'wizard_set_transmission', True)
+            else:
+                self.oe.winOeMain.set_wizard_radiobutton_2(self.oe._(33000), self, 'wizard_set_transmission')
+
+            self.oe.dbg_log('transmission::set_wizard_buttons', 'exit_function', 0)
+
+        except Exception, e:
+            self.oe.dbg_log('transmission::set_wizard_buttons', 'ERROR: (%s)' % repr(e))
+
+    def wizard_set_transmission(self):
+        try:
+            self.oe.dbg_log('transmission::wizard_set_transmission', 'enter_function', 0)
+            if self.struct['transmission']['settings']['transmission_autostart']['value'] == '1':
+                self.struct['transmission']['settings']['transmission_autostart']['value'] = '0'
+ 
+            else:
+                self.struct['transmission']['settings']['transmission_autostart']['value'] = '1'
+
+                self.initialize_transmission()
+                self.load_values()
+                self.set_wizard_buttons()
+
+                self.oe.dbg_log('transmission::wizard_set_transmission', 'exit_function', 0)
+
+        except Exception, e:
+            self.oe.dbg_log('transmission::wizard_set_transmission', 'ERROR: (%s)' % repr(e))
diff -Naur a/src/resources/lib/modules/tvservers.py b/src/resources/lib/modules/tvservers.py
--- a/src/resources/lib/modules/tvservers.py	1970-01-01 03:00:00.000000000 +0300
+++ b/src/resources/lib/modules/tvservers.py	2019-08-08 03:26:30.454264150 +0300
@@ -0,0 +1,2203 @@
+################################################################################
+#      This file is part of OpenELEC - http://www.openelec.tv
+#      Copyright (C) 2009-2016 Stephan Raue (stephan@openelec.tv)
+#      Copyright (C) 2013 Lutz Fiebach (lufie@openelec.tv)
+#
+#  This program is dual-licensed; you can redistribute it and/or modify
+#  it under the terms of the GNU General Public License as published by
+#  the Free Software Foundation; either version 2 of the License, or
+#  (at your option) any later version.
+#
+#  This Program is distributed in the hope that it will be useful,
+#  but WITHOUT ANY WARRANTY; without even the implied warranty of
+#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+#  GNU General Public License for more details.
+#
+#  You should have received a copy of the GNU General Public License
+#  along with OpenELEC; see the file COPYING.  If not, see
+#  <http://www.gnu.org/licenses/>.
+#
+#  Alternatively, you can license this library under a commercial license,
+#  please contact OpenELEC Licensing for more information.
+#
+#  For more information contact:
+#  OpenELEC Licensing  <license@openelec.tv>  http://www.openelec.tv
+################################################################################
+# -*- coding: utf-8 -*-
+import xbmc
+import xbmcgui
+import os
+import glob
+import oeWindows
+
+class tvservers:
+
+    ENABLED = False
+    TVHEADEND_DAEMON = None
+    TVHEADEND_DAEMON_START = None
+    VDR_DAEMON = None
+    VDR_DAEMON_START = None
+    VDR_DAEMON_FRONT = None
+    OSCAM_DAEMON = None
+    OSCAM_DAEMON_START = None
+    D_TV_BACKEND = None
+    D_PRELOAD_CAPMT_CA = None
+    D_TVH_BACKUP = None
+    D_TVH_DEBUG = None
+    D_TVH_ADAPTERS = None
+    D_TVH_OTHER_ARG = None
+    D_XMLTV_TYPE = None
+    D_XMLTV_LOCATION_FILE = None
+    D_XMLTV_LOCATION_WEB = None
+    D_XMLTV_LOCATION_SCRIPT = None
+    D_ENABLE_EXTERNAL_RECCMD = None
+    D_EXTERNAL_RECCMD_PATH = None
+    D_ENABLE_CHARSET_OVERRIDE = None
+    D_CHARSET_OVERRIDE_STR = None
+    D_VDR_VIDEO_DIR = None
+    D_VDR_DEBUG = None
+    D_VDR_PVR_PLUGIN = None
+    D_ENABLE_IPTV = None
+    D_IPTV_NUM_DEVICES = None
+    D_ENABLE_STREAMDEV_CLIENT = None
+    D_ENABLE_STREAMDEV_SERVER = None
+    D_ENABLE_WIRBELSCAN = None
+    D_ENABLE_LIVE = None
+    D_LIVE_IP = None
+    D_LIVE_PORT = None
+    D_ENABLE_EPGSEARCH = None
+    D_ENABLE_XMLTV2VDR = None
+    D_ENABLE_SOFTCAM = None
+    D_SOFTCAM_OPTION = None
+    D_ENABLE_DUMMYDEVICE = None
+    D_ENABLE_SATIP = None
+    D_ENABLE_EPGFIXER = None
+    D_ENABLE_RESTFULAPI = None
+    D_RESTFULAPI_IP = None
+    D_RESTFULAPI_PORT = None
+    D_ENABLE_DDCI2 = None
+    D_ENABLE_DYNAMITE = None
+    D_ENABLE_ROBOTV = None
+    D_VDR_OTHER_ARG = None
+    D_TV_FRONT = None
+    D_F_ENABLE_EXTERNAL_RECCMD = None
+    D_F_EXTERNAL_RECCMD_PATH = None
+    D_F_ENABLE_CHARSET_OVERRIDE = None
+    D_F_CHARSET_OVERRIDE_STR = None
+    D_F_VDR_VIDEO_DIR = None
+    D_F_VDR_DEBUG = None
+    D_F_ENABLE_IPTV = None
+    D_F_IPTV_NUM_DEVICES = None
+    D_F_ENABLE_STREAMDEV_CLIENT = None
+    D_F_ENABLE_STREAMDEV_SERVER = None
+    D_F_ENABLE_WIRBELSCAN = None
+    D_F_ENABLE_LIVE = None
+    D_F_LIVE_IP = None
+    D_F_LIVE_PORT = None
+    D_F_ENABLE_EPGSEARCH = None
+    D_F_ENABLE_XMLTV2VDR = None
+    D_F_ENABLE_SOFTCAM = None
+    D_F_SOFTCAM_OPTION = None
+    D_F_ENABLE_DUMMYDEVICE = None
+    D_F_ENABLE_SATIP = None
+    D_F_ENABLE_EPGFIXER = None
+    D_F_ENABLE_RESTFULAPI = None
+    D_F_RESTFULAPI_IP = None
+    D_F_RESTFULAPI_PORT = None
+    D_F_ENABLE_DDCI2 = None
+    D_F_ENABLE_DYNAMITE = None
+    D_F_ENABLE_ROBOTV = None
+    D_F_ENABLE_FEMON = None
+    D_F_ENABLE_CHANNELLISTS = None
+    D_F_ENABLE_PIN = None
+    D_F_ENABLE_SYSTEMINFO = None
+    D_F_ENABLE_SLEEPTIMER = None
+    D_F_ENABLE_FILEBROWSER = None
+    D_F_ENABLE_LCDPROC = None
+    D_F_ENABLE_TEXT2SKIN = None
+    D_F_ENABLE_SKINNOPACITY = None
+    D_F_ENABLE_SKINFLAT = None
+    D_F_ENABLE_SKINFLATPLUS = None
+#    D_F_ENABLE_MENUORG = None
+    D_F_ENABLE_TVSCRAPER = None
+    D_F_ENABLE_SKINDESIGNER = None
+    D_F_ENABLE_TVGUIDENG = None
+    D_F_ENABLE_WEATHERFORECAST = None
+    D_F_ENABLE_FAVORITES = None
+    D_F_VDR_OTHER_ARG = None
+    D_F_VDR_FRONT = None
+    D_F_VDR_OUTPUTVIDEO = None
+    D_F_VDR_SOUNDSOFT = None
+    D_F_VDR_SOUNDXINE = None
+    D_F_VDR_SOFTPARAM = None
+    D_F_VDR_XINEPARAM = None
+    D_WAIT_FOR_FEINIT = None
+    D_NUM_ADAPTERS = None
+    D_REMOVE_MODULES = None
+    D_OSCAM_ENABLE = None
+    D_OSCAM_DEBUG = None
+    D_RESTART_ON_RESUME = None
+    menu = {'8': {
+        'name': 34000,
+        'menuLoader': 'load_menu',
+        'listTyp': 'list',
+        'InfoText': 1000,
+        }}
+
+    def __init__(self, oeMain):
+        try:
+            oeMain.dbg_log('tvservers::__init__', 'enter_function', 0)
+
+            self.oe = oeMain
+
+            self.struct = {
+                'tvbackends': {
+                    'order': 1,
+                    'name': 35000,
+                    'not_supported': [],
+                    'settings': {
+                        'tv_backend': {
+                            'order': 1,
+                            'name': 35001,
+                            'value': 'none',
+                            'values': ['none','tvheadend','vdr'],
+                            'action': 'initialize_tvbackend',
+                            'type': 'multivalue',
+                            'InfoText': 1001,
+                        },
+                    },
+                },
+                'tvheadend': {
+                    'order': 2,
+                    'name': 36000,
+                    'not_supported': [],
+                    'settings': {
+                        'preload_capmt_ca': {
+                            'order': 1,
+                            'name': 36001,
+                            'value': '0',
+                            'action': 'initialize_tvheadend',
+                            'type': 'bool',
+                            'InfoText': 1101,
+                        },
+                        'tvh_backup': {
+                            'order': 2,
+                            'name': 36002,
+                            'value': '0',
+                            'action': 'initialize_tvheadend',
+                            'type': 'bool',
+                            'InfoText': 1102,
+                        },
+                        'tvh_debug': {
+                            'order': 3,
+                            'name': 36003,
+                            'value': '0',
+                            'action': 'initialize_tvheadend',
+                            'type': 'bool',
+                            'InfoText': 1103,
+                        },
+                        'tvh_adapters': {
+                            'order': 4,
+                            'name': 36004,
+                            'value': '',
+                            'action': 'initialize_tvheadend',
+                            'type': 'text',
+                            'InfoText': 1104,
+                        },
+                        'tvh_other': {
+                            'order': 5,
+                            'name': 36005,
+                            'value': '',
+                            'action': 'initialize_tvheadend',
+                            'type': 'text',
+                            'InfoText': 1105,
+                        },
+                        'xmltv_type': {
+                            'order': 6,
+                            'name': 36006,
+                            'value': 'none',
+                            'values': ['none','file','web','script'],
+                            'action': 'initialize_tvheadend',
+                            'type': 'multivalue',
+                            'InfoText': 1106,
+                        },
+                        'xmltv_location_file': {
+                            'order': 7,
+                            'name': 36007,
+                            'value': '',
+                            'action': 'initialize_tvheadend',
+                            'type': 'file',
+                            'parent': {'entry': 'xmltv_type','value': ['file']},
+                            'InfoText': 1107,
+                        },
+                        'xmltv_location_web': {
+                            'order': 8,
+                            'name': 36008,
+                            'value': 'http://',
+                            'action': 'initialize_tvheadend',
+                            'type': 'text',
+                            'parent': {'entry': 'xmltv_type','value': ['web']},
+                            'InfoText': 1108,
+                        },
+                        'xmltv_location_script': {
+                            'order': 9,
+                            'name': 36009,
+                            'value': '',
+                            'action': 'initialize_tvheadend',
+                            'type': 'folder',
+                            'parent': {'entry': 'xmltv_type','value': ['script']},
+                            'InfoText': 1109,
+                        },
+                    },
+                },
+                'vdr': {
+                    'order': 3,
+                    'name': 37000,
+                    'not_supported': [],
+                    'settings': {
+                        'enable_ext_reccmd': {
+                            'order': 1,
+                            'name': 37001,
+                            'value': '0',
+                            'action': 'initialize_vdr',
+                            'type': 'bool',
+                            'InfoText': 1201,
+                        },
+                        'ext_reccmd_path': {
+                            'order': 2,
+                            'name': 37002,
+                            'value': '',
+                            'action': 'initialize_vdr',
+                            'type': 'folder',
+                            'parent': {'entry': 'enable_ext_reccmd','value': ['1']},
+                            'InfoText': 1202,
+                        },
+                        'enable_charset_override': {
+                            'order': 3,
+                            'name': 37003,
+                            'value': '0',
+                            'action': 'initialize_vdr',
+                            'type': 'bool',
+                            'InfoText': 1203,
+                        },
+                        'charset_override': {
+                            'order': 4,
+                            'name': 37004,
+                            'value': '',
+                            'action': 'initialize_vdr',
+                            'parent': {'entry': 'enable_charset_override','value': ['1']},
+                            'type': 'text',
+                            'InfoText': 1204,
+                        },
+                        'vdr_video_dir': {
+                            'order': 5,
+                            'name': 37005,
+                            'value': '/storage/videos/',
+                            'action': 'initialize_vdr',
+                            'type': 'folder',
+                            'InfoText': 1205,
+                        },
+                        'vdr_debug': {
+                            'order': 6,
+                            'name': 37006,
+                            'value': '0',
+                            'action': 'initialize_vdr',
+                            'type': 'bool',
+                            'InfoText': 1206,
+                        },
+                        'vdr_pvr_plugin': {
+                            'order': 7,
+                            'name': 37007,
+                            'value': 'vnsiserver',
+                            'values': ['vnsiserver'],
+                            'action': 'initialize_vdr',
+                            'type': 'multivalue',
+                            'InfoText': 1207,
+                        },
+                        'enable_iptv': {
+                            'order': 8,
+                            'name': 37008,
+                            'value': '0',
+                            'action': 'initialize_vdr',
+                            'type': 'bool',
+                            'InfoText': 1208,
+                        },
+                        'num_devices': {
+                            'order': 9,
+                            'name': 37009,
+                            'value': '1',
+                            'action': 'initialize_vdr',
+                            'type': 'num',
+                            'parent': {'entry': 'enable_iptv','value': ['1']},
+                            'InfoText': 1209,
+                        },
+                        'enable_streamdev_client': {
+                            'order': 10,
+                            'name': 37010,
+                            'value': '0',
+                            'action': 'initialize_vdr',
+                            'type': 'bool',
+                            'InfoText': 1210,
+                        },
+                        'enable_streamdev_server': {
+                            'order': 11,
+                            'name': 37011,
+                            'value': '0',
+                            'action': 'initialize_vdr',
+                            'type': 'bool',
+                            'InfoText': 1211,
+                        },
+                        'enable_wirbelscan': {
+                            'order': 12,
+                            'name': 37012,
+                            'value': '0',
+                            'action': 'initialize_vdr',
+                            'type': 'bool',
+                            'InfoText': 1212,
+                        },
+                        'enable_live': {
+                            'order': 13,
+                            'name': 37013,
+                            'value': '0',
+                            'action': 'initialize_vdr',
+                            'type': 'bool',
+                            'InfoText': 1213,
+                        },
+                        'live_ip': {
+                            'order': 14,
+                            'name': 37014,
+                            'value': '0.0.0.0',
+                            'action': 'initialize_vdr',
+                            'type': 'text',
+                            'parent': {'entry': 'enable_live','value': ['1']},
+                            'InfoText': 1214,
+                        },
+                        'live_port': {
+                            'order': 15,
+                            'name': 37015,
+                            'value': '8008',
+                            'action': 'initialize_vdr',
+                            'type': 'num',
+                            'parent': {'entry': 'enable_live','value': ['1']},
+                            'InfoText': 1215,
+                        },
+                        'enable_epgsearch': {
+                            'order': 16,
+                            'name': 37016,
+                            'value': '1',
+                            'action': 'initialize_vdr',
+                            'type': 'bool',
+                            'InfoText': 1216,
+                        },
+                        'enable_xmltv2vdr': {
+                            'order': 17,
+                            'name': 37017,
+                            'value': '0',
+                            'action': 'initialize_vdr',
+                            'type': 'bool',
+                            'InfoText': 1217,
+                        },
+                        'enable_softcam': {
+                            'order': 18,
+                            'name': 37018,
+                            'value': '1',
+                            'action': 'initialize_vdr',
+                            'type': 'bool',
+                            'InfoText': 1218,
+                        },
+                        'softcam_option': {
+                            'order': 19,
+                            'name': 37019,
+                            'value': '',
+                            'action': 'initialize_vdr',
+                            'type': 'text',
+                            'parent': {'entry': 'enable_softcam','value': ['1']},
+                            'InfoText': 1219,
+                        },
+                        'enable_dummydevice': {
+                            'order': 20,
+                            'name': 37020,
+                            'value': '0',
+                            'action': 'initialize_vdr',
+                            'type': 'bool',
+                            'InfoText': 1220,
+                        },
+                        'enable_satip': {
+                            'order': 21,
+                            'name': 37021,
+                            'value': '0',
+                            'action': 'initialize_vdr',
+                            'type': 'bool',
+                            'InfoText': 1221,
+                        },
+                        'enable_epgfixer': {
+                            'order': 22,
+                            'name': 37022,
+                            'value': '0',
+                            'action': 'initialize_vdr',
+                            'type': 'bool',
+                            'InfoText': 1222,
+                        },
+                        'enable_restfulapi': {
+                            'order': 23,
+                            'name': 37023,
+                            'value': '0',
+                            'action': 'initialize_vdr',
+                            'type': 'bool',
+                            'InfoText': 1223,
+                        },
+                        'restfulapi_ip': {
+                            'order': 24,
+                            'name': 37024,
+                            'value': '0.0.0.0',
+                            'action': 'initialize_vdr',
+                            'type': 'text',
+                            'parent': {'entry': 'enable_restfulapi','value': ['1']},
+                            'InfoText': 1224,
+                        },
+                        'restfulapi_port': {
+                            'order': 25,
+                            'name': 37025,
+                            'value': '8002',
+                            'action': 'initialize_vdr',
+                            'type': 'num',
+                            'parent': {'entry': 'enable_restfulapi','value': ['1']},
+                            'InfoText': 1225,
+                        },
+                        'enable_ddci2': {
+                            'order': 26,
+                            'name': 37026,
+                            'value': '0',
+                            'action': 'initialize_vdr',
+                            'type': 'bool',
+                            'InfoText': 1226,
+                        },
+                        'enable_dynamite': {
+                            'order': 27,
+                            'name': 37027,
+                            'value': '0',
+                            'action': 'initialize_vdr',
+                            'type': 'bool',
+                            'InfoText': 1227,
+                        },
+                        'enable_robotv': {
+                            'order': 28,
+                            'name': 37028,
+                            'value': '0',
+                            'action': 'initialize_vdr',
+                            'type': 'bool',
+                            'InfoText': 1228,
+                        },
+                        'vdr_other': {
+                            'order': 29,
+                            'name': 36005,
+                            'value': '',
+                            'action': 'initialize_vdr',
+                            'type': 'text',
+                            'InfoText': 1105,
+                        },
+                    },
+                },
+                'tvfrontends': {
+                    'order': 4,
+                    'name': 38000,
+                    'not_supported': [],
+                    'settings': {
+                        'tv_frontends': {
+                            'order': 1,
+                            'name': 38001,
+                            'value': 'none',
+                            'values': ['none','vdr'],
+                            'action': 'initialize_tvfrontends',
+                            'type': 'multivalue',
+                            'InfoText': 1301,
+                        },
+                    },
+                },
+                'vdrfront': {
+                    'order': 5,
+                    'name': 39000,
+                    'not_supported': [],
+                    'settings': {
+                        'enable_ext_reccmd': {
+                            'order': 1,
+                            'name': 37001,
+                            'value': '0',
+                            'action': 'initialize_vdrfront',
+                            'type': 'bool',
+                            'InfoText': 1201,
+                        },
+                        'ext_reccmd_path': {
+                            'order': 2,
+                            'name': 37002,
+                            'value': '',
+                            'action': 'initialize_vdrfront',
+                            'parent': {'entry': 'enable_ext_reccmd','value': ['1']},
+                            'type': 'folder',
+                            'InfoText': 1202,
+                        },
+                        'enable_charset_override': {
+                            'order': 3,
+                            'name': 37003,
+                            'value': '0',
+                            'action': 'initialize_vdrfront',
+                            'type': 'bool',
+                            'InfoText': 1203,
+                        },
+                        'charset_override': {
+                            'order': 4,
+                            'name': 37004,
+                            'value': '',
+                            'action': 'initialize_vdrfront',
+                            'parent': {'entry': 'enable_charset_override','value': ['1']},
+                            'type': 'text',
+                            'InfoText': 1204,
+                        },
+                        'vdr_video_dir': {
+                             'order': 5,
+                            'name': 37005,
+                            'value': '/storage/videos/',
+                            'action': 'initialize_vdrfront',
+                            'type': 'folder',
+                            'InfoText': 1205,
+                        },
+                        'vdr_debug': {
+                            'order': 6,
+                            'name': 37006,
+                            'value': '0',
+                            'action': 'initialize_vdrfront',
+                            'type': 'bool',
+                            'InfoText': 1206,
+                        },
+                        'enable_iptv': {
+                            'order': 7,
+                            'name': 37008,
+                            'value': '0',
+                            'action': 'initialize_vdrfront',
+                            'type': 'bool',
+                            'InfoText': 1208,
+                        },
+                        'num_devices': {
+                            'order': 8,
+                            'name': 37009,
+                            'value': '1',
+                            'action': 'initialize_vdrfront',
+                            'type': 'num',
+                            'parent': {'entry': 'enable_iptv','value': ['1']},
+                            'InfoText': 1209,
+                        },
+                        'enable_streamdev_client': {
+                            'order': 9,
+                            'name': 37010,
+                            'value': '0',
+                            'action': 'initialize_vdrfront',
+                            'type': 'bool',
+                            'InfoText': 1210,
+                        },
+                        'enable_streamdev_server': {
+                            'order': 10,
+                            'name': 37011,
+                            'value': '0',
+                            'action': 'initialize_vdrfront',
+                            'type': 'bool',
+                            'InfoText': 1211,
+                        },
+                        'enable_wirbelscan': {
+                            'order': 11,
+                            'name': 37012,
+                            'value': '1',
+                            'action': 'initialize_vdrfront',
+                            'type': 'bool',
+                            'InfoText': 1212,
+                        },
+                        'enable_live': {
+                            'order': 12,
+                            'name': 37013,
+                            'value': '0',
+                            'action': 'initialize_vdrfront',
+                            'type': 'bool',
+                            'InfoText': 1213,
+                        },
+                        'live_ip': {
+                            'order': 13,
+                            'name': 37014,
+                            'value': '0.0.0.0',
+                            'action': 'initialize_vdrfront',
+                            'type': 'text',
+                            'parent': {'entry': 'enable_live','value': ['1']},
+                            'InfoText': 1214,
+                        },
+                        'live_port': {
+                            'order': 14,
+                            'name': 37015,
+                            'value': '8008',
+                            'action': 'initialize_vdrfront',
+                            'type': 'num',
+                            'parent': {'entry': 'enable_live','value': ['1']},
+                            'InfoText': 1215,
+                        },
+                        'enable_epgsearch': {
+                            'order': 15,
+                            'name': 37016,
+                            'value': '1',
+                            'action': 'initialize_vdrfront',
+                            'type': 'bool',
+                            'InfoText': 1216,
+                        },
+                        'enable_xmltv2vdr': {
+                            'order': 16,
+                            'name': 37017,
+                            'value': '0',
+                            'action': 'initialize_vdrfront',
+                            'type': 'bool',
+                            'InfoText': 1217,
+                        },
+                        'enable_softcam': {
+                            'order': 17,
+                            'name': 37018,
+                            'value': '1',
+                            'action': 'initialize_vdrfront',
+                            'type': 'bool',
+                            'InfoText': 1218,
+                        },
+                        'softcam_option': {
+                            'order': 18,
+                            'name': 37019,
+                            'value': '',
+                            'action': 'initialize_vdrfront',
+                            'type': 'text',
+                            'parent': {'entry': 'enable_softcam','value': ['1']},
+                            'InfoText': 1219,
+                        },
+                        'enable_dummydevice': {
+                            'order': 19,
+                            'name': 37020,
+                            'value': '0',
+                            'action': 'initialize_vdrfront',
+                            'type': 'bool',
+                            'InfoText': 1220,
+                        },
+                        'enable_satip': {
+                            'order': 20,
+                            'name': 37021,
+                            'value': '0',
+                            'action': 'initialize_vdrfront',
+                            'type': 'bool',
+                            'InfoText': 1221,
+                        },
+                        'enable_epgfixer': {
+                            'order': 21,
+                            'name': 37022,
+                            'value': '0',
+                            'action': 'initialize_vdrfront',
+                            'type': 'bool',
+                            'InfoText': 1222,
+                        },
+                        'enable_restfulapi': {
+                            'order': 22,
+                            'name': 37023,
+                            'value': '0',
+                            'action': 'initialize_vdrfront',
+                            'type': 'bool',
+                            'InfoText': 1223,
+                        },
+                        'restfulapi_ip': {
+                            'order': 23,
+                            'name': 37024,
+                            'value': '0.0.0.0',
+                            'action': 'initialize_vdrfront',
+                            'type': 'text',
+                            'parent': {'entry': 'enable_restfulapi','value': ['1']},
+                            'InfoText': 1224,
+                        },
+                        'restfulapi_port': {
+                            'order': 24,
+                            'name': 37025,
+                            'value': '8002',
+                            'action': 'initialize_vdrfront',
+                            'type': 'num',
+                            'parent': {'entry': 'enable_restfulapi','value': ['1']},
+                            'InfoText': 1225,
+                        },
+                        'enable_ddci2': {
+                            'order': 25,
+                            'name': 37026,
+                            'value': '0',
+                            'action': 'initialize_vdrfront',
+                            'type': 'bool',
+                            'InfoText': 1226,
+                        },
+                        'enable_dynamite': {
+                            'order': 26,
+                            'name': 37027,
+                            'value': '0',
+                            'action': 'initialize_vdrfront',
+                            'type': 'bool',
+                            'InfoText': 1227,
+                        },
+                        'enable_robotv': {
+                            'order': 27,
+                            'name': 37028,
+                            'value': '0',
+                            'action': 'initialize_vdrfront',
+                            'type': 'bool',
+                            'InfoText': 1228,
+                        },
+                        'enable_channellists': {
+                            'order': 28,
+                            'name': 39020,
+                            'value': '0',
+                            'action': 'initialize_vdrfront',
+                            'type': 'bool',
+                            'InfoText': 1420,
+                        },
+                        'enable_pin': {
+                            'order': 29,
+                            'name': 39021,
+                            'value': '0',
+                            'action': 'initialize_vdrfront',
+                            'type': 'bool',
+                            'InfoText': 1421,
+                        },
+                        'enable_femon': {
+                            'order': 30,
+                            'name': 39022,
+                            'value': '1',
+                            'action': 'initialize_vdrfront',
+                            'type': 'bool',
+                            'InfoText': 1422,
+                        },
+                        'enable_systeminfo': {
+                            'order': 31,
+                            'name': 39023,
+                            'value': '1',
+                            'action': 'initialize_vdrfront',
+                            'type': 'bool',
+                            'InfoText': 1423,
+                        }, 
+                        'enable_sleeptimer': {
+                            'order': 32,
+                            'name': 39024,
+                            'value': '1',
+                            'action': 'initialize_vdrfront',
+                            'type': 'bool',
+                            'InfoText': 1424,
+                        },
+                        'enable_filebrowser': {
+                            'order': 33,
+                            'name': 39025,
+                            'value': '1',
+                            'action': 'initialize_vdrfront',
+                            'type': 'bool',
+                            'InfoText': 1425,
+                        },
+                        'enable_lcdproc': {
+                            'order': 34,
+                            'name': 39026,
+                            'value': '1',
+                            'action': 'initialize_vdrfront',
+                            'type': 'bool',
+                            'InfoText': 1426,
+                        },
+                        'enable_imonlcd': {
+                            'order': 35,
+                            'name': 39027,
+                            'value': '1',
+                            'action': 'initialize_vdrfront',
+                            'type': 'bool',
+                            'parent': {'entry': 'enable_lcdproc','value': ['0']},
+                            'InfoText': 1427,
+                        },
+                        'enable_text2skin': {
+                            'order': 36,
+                            'name': 39028,
+                            'value': '1',
+                            'action': 'initialize_vdrfront',
+                            'type': 'bool',
+                            'InfoText': 1428,
+                        },
+                        'enable_skinnopacity': {
+                            'order': 37,
+                            'name': 39029,
+                            'value': '1',
+                            'action': 'initialize_vdrfront',
+                            'type': 'bool',
+                            'InfoText': 1429,
+                        },
+                        'enable_skinflat': {
+                            'order': 38,
+                            'name': 39030,
+                            'value': '1',
+                            'action': 'initialize_vdrfront',
+                            'type': 'bool',
+                            'InfoText': 1430,
+                        },
+                        'enable_flatplus': {
+                            'order': 39,
+                            'name': 39031,
+                            'value': '1',
+                            'action': 'initialize_vdrfront',
+                            'type': 'bool',
+                            'InfoText': 1431,
+                        },
+                        'enable_skindesigner': {
+                            'order': 40,
+                            'name': 39032,
+                            'value': '1',
+                            'action': 'initialize_vdrfront',
+                            'type': 'bool',
+                            'InfoText': 1432,
+                        },
+                        'enable_tvguideng': {
+                            'order': 41,
+                            'name': 39033,
+                            'value': '1',
+                            'action': 'initialize_vdrfront',
+                            'type': 'bool',
+                            'parent': {'entry': 'enable_skindesigner','value': ['1']},
+                            'InfoText': 1433,
+                        },
+                        'enable_weatherforecast': {
+                            'order': 42,
+                            'name': 39034,
+                            'value': '1',
+                            'action': 'initialize_vdrfront',
+                            'type': 'bool',
+                            'parent': {'entry': 'enable_skindesigner','value': ['1']},
+                            'InfoText': 1434,
+                        },
+                        'enable_tvscraper': {
+                            'order': 43,
+                            'name': 39035,
+                            'value': '1',
+                            'action': 'initialize_vdrfront',
+                            'type': 'bool',
+                            'InfoText': 1435,
+                        },
+#                        'enable_menuorg': {
+#                            'order': 44,
+#                            'name': 39036,
+#                            'value': '0',
+#                            'action': 'initialize_vdrfront',
+#                            'type': 'bool',
+#                            'InfoText': 1436,
+#                        },
+                        'enable_favorites': {
+                            'order': 45,
+                            'name': 39037,
+                            'value': '1',
+                            'action': 'initialize_vdrfront',
+                            'type': 'bool',
+                            'InfoText': 1437,
+                        },
+                        'vdr_other': {
+                            'order': 46,
+                            'name': 36005,
+                            'value': '',
+                            'action': 'initialize_vdrfront',
+                            'type': 'text',
+                            'InfoText': 1105,
+                        },
+                        'vdr_pluginfront': {
+                            'order': 47,
+                            'name': 39038,
+                            'value': 'soft',
+                            'values': ['soft','xine'],
+                            'action': 'initialize_vdrfront',
+                            'type': 'multivalue',
+                            'InfoText': 1438,
+                        },
+                        'vdr_frontvideo': {
+                            'order': 48,
+                            'name': 39039,
+                            'value': 'auto',
+                            'values': ['auto','vdpau','vaapi'],
+                            'action': 'initialize_vdrfront',
+                            'type': 'multivalue',
+                            'InfoText': 1439,
+                        },
+                        'vdr_soundsoft': {
+                            'order': 49,
+                            'name': 39040,
+                            'value': 'alsa',
+                            'action': 'initialize_vdrfront',
+                            'type': 'text',
+                            'parent': {'entry': 'vdr_pluginfront','value': ['soft']},
+                            'InfoText': 1440,
+                        },
+                        'vdr_soundxine': {
+                            'order': 50,
+                            'name': 39041,
+                            'value': 'auto',
+                            'action': 'initialize_vdrfront',
+                            'type': 'text',
+                            'parent': {'entry': 'vdr_pluginfront','value': ['xine']},
+                            'InfoText': 1441,
+                        },
+                        'vdr_softparam': {
+                            'order': 51,
+                            'name': 39042,
+                            'value': '',
+                            'action': 'initialize_vdrfront',
+                            'type': 'text',
+                            'parent': {'entry': 'vdr_pluginfront','value': ['soft']},
+                            'InfoText': 1442,
+                        },
+                        'vdr_xineparam': {
+                            'order': 52,
+                            'name': 39043,
+                            'value': '',
+                            'action': 'initialize_vdrfront',
+                            'type': 'text',
+                            'parent': {'entry': 'vdr_pluginfront','value': ['xine']},
+                            'InfoText': 1443,
+                        },
+                    },
+                },
+                'dvb': {
+                    'order': 6,
+                    'name': 40000,
+                    'not_supported': [],
+                    'settings': {
+                        'wait_for_feinit': {
+                            'order': 1,
+                            'name': 40001,
+                            'value': '0',
+                            'action': 'initializetv_backend',
+                            'type': 'bool',
+                            'InfoText': 1501,
+                        },
+                        'num_adapters': {
+                            'order': 2,
+                            'name': 40002,
+                            'value': '1',
+                            'action': 'initialize_tvbackend',
+                            'type': 'num',
+                            'InfoText': 1502,
+                        },
+                        'remove_modules': {
+                            'order': 3,
+                            'name': 40003,
+                            'value': '',
+                            'action': 'initialize_tvbackend',
+                            'type': 'text',
+                            'InfoText': 1503,
+                        },
+                    },
+                },
+                'oscam': {
+                    'order': 7,
+                    'name': 41000,
+                    'not_supported': [],
+                    'settings': {
+                        'enable_oscam': {
+                            'order': 1,
+                            'name': 41001,
+                            'value': '0',
+                            'action': 'initialize_oscam',
+                            'type': 'bool',
+                            'InfoText': 1601,
+                        },
+                        'oscam_debug': {
+                            'order': 2,
+                            'name': 41002,
+                            'value': '1',
+                            'action': 'initialize_oscam',
+                            'type': 'num',
+                            'parent': {'entry': 'enable_oscam','value': ['1']},
+                            'InfoText': 1602,
+                        },
+                        'restart_on_resume': {
+                            'order': 3,
+                            'name': 41003,
+                            'value': '0',
+                            'action': 'initialize_oscam',
+                            'type': 'bool',
+                            'parent': {'entry': 'enable_oscam','value': ['1']},
+                            'InfoText': 1603,
+                        },
+                    },
+                },
+            }
+
+            self.oe.dbg_log('tvservers::__init__', 'exit_function', 0)
+
+        except Exception, e:
+            self.oe.dbg_log('tvservers::__init__', 'ERROR: (%s)' % repr(e))
+
+    def start_service(self):
+        try:
+            self.oe.dbg_log('tvservers::start_service', 'enter_function', 0)
+
+            self.load_values()
+
+            self.initialize_tvbackend()
+            self.initialize_tvfrontends()
+            self.initialize_oscam()
+
+            self.oe.dbg_log('tvservers::start_service', 'exit_function', 0)
+
+        except Exception, e:
+            self.oe.dbg_log('tvservers::start_service', 'ERROR: (%s)' % repr(e))
+
+    def stop_service(self):
+        try:
+            self.oe.dbg_log('tvservers::stop_service', 'enter_function', 0)
+
+            self.oe.dbg_log('tvservers::stop_service', 'exit_function', 0)
+
+        except Exception, e:
+            self.oe.dbg_log('tvservers::stop_service', 'ERROR: (%s)' % repr(e))
+
+    def do_init(self):
+        try:
+            self.oe.dbg_log('tvservers::do_init', 'exit_function', 0)
+
+            self.load_values()
+
+            self.oe.dbg_log('tvservers::do_init', 'exit_function', 0)
+
+        except Exception, e:
+            self.oe.dbg_log('tvservers::do_init', 'ERROR: (%s)' % repr(e))
+
+    def set_value(self, listItem):
+        try:
+            self.oe.dbg_log('tvservers::set_value', 'enter_function', 0)
+
+            self.struct[listItem.getProperty('category')]['settings'][listItem.getProperty('entry')]['value'] = listItem.getProperty('value')
+
+            self.oe.dbg_log('tvservers::set_value', 'exit_function', 0)
+
+        except Exception, e:
+            self.oe.dbg_log('tvservers::set_value', 'ERROR: (%s)' % repr(e))
+
+    def load_menu(self, focusItem):
+        try:
+            self.oe.dbg_log('tvservers::load_menu', 'enter_function', 0)
+
+            self.oe.winOeMain.build_menu(self.struct)
+
+            self.oe.dbg_log('tvservers::load_menu', 'exit_function', 0)
+
+        except Exception, e:
+            self.oe.dbg_log('tvservers::load_menu', 'ERROR: (%s)' % repr(e))
+
+    def load_values(self):
+        try:
+            self.oe.dbg_log('tvservers::load_values', 'enter_function', 0)
+
+            tvheadenabled = \
+            self.oe.get_service_state('tvheadend')
+
+            vdrenabled = \
+            self.oe.get_service_state('vdr')
+
+            oscamenabled = \
+            self.oe.get_service_state('oscam')
+
+            vdrfrontenabled = \
+            self.oe.get_service_state('vdr-front')
+
+            #tvbackend
+
+            if tvheadenabled == '0' and vdrenabled == '0':
+
+                self.struct['tvbackends']['settings']['tv_backend']['value'] = 'none'
+
+            if tvheadenabled == '1' and vdrenabled == '0':
+
+                self.struct['tvbackends']['settings']['tv_backend']['value'] = 'tvheadend'
+
+            if tvheadenabled == '0' and vdrenabled == '1':
+
+                self.struct['tvbackends']['settings']['tv_backend']['value'] = 'vdr'
+
+            #tvheadend
+
+            if os.path.isfile(self.TVHEADEND_DAEMON_START) and os.path.isfile(self.TVHEADEND_DAEMON) and tvheadenabled=='1':
+
+                if 'hidden' in self.struct['tvheadend']:
+                    del self.struct['tvheadend']['hidden']
+
+                self.struct['tvheadend']['settings']['preload_capmt_ca']['value'] = \
+                self.oe.get_service_option('tvheadend', 'TVHEADEND_PRELOAD_CAPMT_CA', self.D_PRELOAD_CAPMT_CA).replace('true','1').replace('false','0').replace('"', '')
+
+                self.struct['tvheadend']['settings']['tvh_backup']['value'] = \
+                self.oe.get_service_option('tvheadend', 'TVHEADEND_BACKUP', self.D_TVH_BACKUP).replace('true','1').replace('false','0').replace('"', '')
+
+                self.struct['tvheadend']['settings']['tvh_debug']['value'] = \
+                self.oe.get_service_option('tvheadend', 'TVHEADEND_DEBUG', self.D_TVH_DEBUG).replace('true','1').replace('false','0').replace('"', '')
+
+                self.struct['tvheadend']['settings']['tvh_adapters']['value'] = \
+                self.oe.get_service_option('tvheadend', 'TVHEADEND_ADAPTERS', self.D_TVH_ADAPTERS).replace('"', '')
+
+                self.struct['tvheadend']['settings']['tvh_other']['value'] = \
+                self.oe.get_service_option('tvheadend', 'TVHEADEND_OTHER', self.D_TVH_OTHER_ARG).replace('"', '')
+
+                self.struct['tvheadend']['settings']['xmltv_type']['value'] = \
+                self.oe.get_service_option('tvheadend', 'TVHEADEND_XMLTV_TYPE', self.D_XMLTV_TYPE).replace('"', '')
+
+                self.struct['tvheadend']['settings']['xmltv_location_file']['value'] = \
+                self.oe.get_service_option('tvheadend', 'TVHEADEND_XMLTV_LOCATION_FILE', self.D_XMLTV_LOCATION_FILE).replace('"', '')
+
+                self.struct['tvheadend']['settings']['xmltv_location_web']['value'] = \
+                self.oe.get_service_option('tvheadend', 'TVHEADEND_XMLTV_LOCATION_WEB', self.D_XMLTV_LOCATION_WEB).replace('"', '')
+
+                self.struct['tvheadend']['settings']['xmltv_location_script']['value'] = \
+                self.oe.get_service_option('tvheadend', 'TVHEADEND_XMLTV_LOCATION_SCRIPT', self.D_XMLTV_LOCATION_SCRIPT).replace('"', '')
+
+            else:
+                self.struct['tvheadend']['hidden'] = 'true'
+
+            #vdr
+
+            if os.path.isfile(self.VDR_DAEMON_START) and os.path.isfile(self.VDR_DAEMON) and vdrenabled=='1':
+
+                if 'hidden' in self.struct['vdr']:
+                    del self.struct['vdr']['hidden']
+
+                self.struct['vdr']['settings']['enable_ext_reccmd']['value'] = \
+                self.oe.get_service_option('vdr', 'VDR_ENABLE_EXTERNAL_RECCMD', self.D_ENABLE_EXTERNAL_RECCMD).replace('true','1').replace('false','0').replace('"', '')
+
+                self.struct['vdr']['settings']['ext_reccmd_path']['value'] = \
+                self.oe.get_service_option('vdr', 'VDR_EXTERNAL_RECCMD_PATH', self.D_EXTERNAL_RECCMD_PATH).replace('"', '')
+
+                self.struct['vdr']['settings']['enable_charset_override']['value'] = \
+                self.oe.get_service_option('vdr', 'VDR_ENABLE_CHARSET_OVERRIDE', self.D_ENABLE_CHARSET_OVERRIDE).replace('true','1').replace('false','0').replace('"', '')
+
+                self.struct['vdr']['settings']['charset_override']['value'] = \
+                self.oe.get_service_option('vdr', 'VDR_CHARSET_OVERRIDE_STR', self.D_CHARSET_OVERRIDE_STR).replace('"', '')
+
+                self.struct['vdr']['settings']['vdr_video_dir']['value'] = \
+                self.oe.get_service_option('vdr', 'VDR_VIDEO_DIR', self.D_VDR_VIDEO_DIR).replace('"', '')
+
+                self.struct['vdr']['settings']['vdr_debug']['value'] = \
+                self.oe.get_service_option('vdr', 'VDR_DEBUG', self.D_VDR_DEBUG).replace('true','1').replace('false','0').replace('"', '')
+
+                self.struct['vdr']['settings']['vdr_pvr_plugin']['value'] = \
+                self.oe.get_service_option('vdr', 'VDR_PVR_PLUGIN', self.D_VDR_PVR_PLUGIN).replace('"', '')
+
+                self.struct['vdr']['settings']['enable_iptv']['value'] = \
+                self.oe.get_service_option('vdr', 'VDR_ENABLE_IPTV', self.D_ENABLE_IPTV).replace('true','1').replace('false','0').replace('"', '')
+
+                self.struct['vdr']['settings']['num_devices']['value'] = \
+                self.oe.get_service_option('vdr', 'VDR_IPTV_NUM_DEVICES', self.D_IPTV_NUM_DEVICES).replace('"', '')
+
+                self.struct['vdr']['settings']['enable_streamdev_client']['value'] = \
+                self.oe.get_service_option('vdr', 'VDR_ENABLE_STREAMDEV_CLIENT', self.D_ENABLE_STREAMDEV_CLIENT).replace('true','1').replace('false','0').replace('"', '')
+
+                self.struct['vdr']['settings']['enable_streamdev_server']['value'] = \
+                self.oe.get_service_option('vdr', 'VDR_ENABLE_STREAMDEV_SERVER', self.D_ENABLE_STREAMDEV_SERVER).replace('true','1').replace('false','0').replace('"', '')
+
+                self.struct['vdr']['settings']['enable_wirbelscan']['value'] = \
+                self.oe.get_service_option('vdr', 'VDR_ENABLE_WIRBELSCAN', self.D_ENABLE_WIRBELSCAN).replace('true','1').replace('false','0').replace('"', '')
+
+                self.struct['vdr']['settings']['enable_live']['value'] = \
+                self.oe.get_service_option('vdr', 'VDR_ENABLE_LIVE', self.D_ENABLE_LIVE).replace('true','1').replace('false','0').replace('"', '')
+
+                self.struct['vdr']['settings']['live_ip']['value'] = \
+                self.oe.get_service_option('vdr', 'VDR_LIVE_IP', self.D_LIVE_IP).replace('"', '')
+
+                self.struct['vdr']['settings']['live_port']['value'] = \
+                self.oe.get_service_option('vdr', 'VDR_LIVE_PORT', self.D_LIVE_PORT).replace('"', '')
+
+                self.struct['vdr']['settings']['enable_epgsearch']['value'] = \
+                self.oe.get_service_option('vdr', 'VDR_ENABLE_EPGSEARCH', self.D_ENABLE_EPGSEARCH).replace('true','1').replace('false','0').replace('"', '')
+
+                self.struct['vdr']['settings']['enable_xmltv2vdr']['value'] = \
+                self.oe.get_service_option('vdr', 'VDR_ENABLE_XMLTV2VDR', self.D_ENABLE_XMLTV2VDR).replace('true','1').replace('false','0').replace('"', '')
+
+                self.struct['vdr']['settings']['enable_softcam']['value'] = \
+                self.oe.get_service_option('vdr', 'VDR_ENABLE_SOFTCAM', self.D_ENABLE_SOFTCAM).replace('true','1').replace('false','0').replace('"', '')
+
+                self.struct['vdr']['settings']['softcam_option']['value'] = \
+                self.oe.get_service_option('vdr', 'VDR_DVBAPI_OPTION', self.D_SOFTCAM_OPTION).replace('"', '')
+
+                self.struct['vdr']['settings']['enable_dummydevice']['value'] = \
+                self.oe.get_service_option('vdr', 'VDR_ENABLE_DUMMYDEVICE', self.D_ENABLE_DUMMYDEVICE).replace('true','1').replace('false','0').replace('"', '')
+
+                self.struct['vdr']['settings']['enable_satip']['value'] = \
+                self.oe.get_service_option('vdr', 'VDR_ENABLE_SATIP', self.D_ENABLE_SATIP).replace('true','1').replace('false','0').replace('"', '')
+
+                self.struct['vdr']['settings']['enable_epgfixer']['value'] = \
+                self.oe.get_service_option('vdr', 'VDR_ENABLE_EPGFIXER', self.D_ENABLE_EPGFIXER).replace('true','1').replace('false','0').replace('"', '')
+
+                self.struct['vdr']['settings']['enable_restfulapi']['value'] = \
+                self.oe.get_service_option('vdr', 'VDR_ENABLE_RESTFULAPI', self.D_ENABLE_RESTFULAPI).replace('true','1').replace('false','0').replace('"', '')
+
+                self.struct['vdr']['settings']['restfulapi_ip']['value'] = \
+                self.oe.get_service_option('vdr', 'VDR_RESTFULAPI_IP', self.D_RESTFULAPI_IP).replace('"', '')
+
+                self.struct['vdr']['settings']['restfulapi_port']['value'] = \
+                self.oe.get_service_option('vdr', 'VDR_RESTFULAPI_PORT', self.D_RESTFULAPI_PORT).replace('"', '')
+
+                self.struct['vdr']['settings']['enable_ddci2']['value'] = \
+                self.oe.get_service_option('vdr', 'VDR_ENABLE_DDCI2', self.D_ENABLE_DDCI2).replace('true','1').replace('false','0').replace('"', '')
+
+                self.struct['vdr']['settings']['enable_dynamite']['value'] = \
+                self.oe.get_service_option('vdr', 'VDR_ENABLE_DYNAMITE', self.D_ENABLE_DYNAMITE).replace('true','1').replace('false','0').replace('"', '')
+
+                self.struct['vdr']['settings']['enable_robotv']['value'] = \
+                self.oe.get_service_option('vdr', 'VDR_ENABLE_ROBOTV', self.D_ENABLE_ROBOTV).replace('true','1').replace('false','0').replace('"', '')
+
+                self.struct['vdr']['settings']['vdr_other']['value'] = \
+                self.oe.get_service_option('vdr', 'VDR_OTHER', self.D_VDR_OTHER_ARG).replace('"', '')
+
+            else:
+                self.struct['vdr']['hidden'] = 'true'
+
+            #tvfrontend
+
+            if vdrfrontenabled == '1':
+
+                self.struct['tvfrontends']['settings']['tv_frontends']['value'] = 'vdr'
+
+            else:
+
+                self.struct['tvfrontends']['settings']['tv_frontends']['value'] = 'none'
+
+            #vdr-front
+
+            if os.path.isfile(self.VDR_DAEMON_FRONT) and vdrfrontenabled=='1':
+
+                if 'hidden' in self.struct['vdrfront']:
+                    del self.struct['vdrfront']['hidden']
+
+                self.struct['vdrfront']['settings']['enable_ext_reccmd']['value'] = \
+                self.oe.get_service_option('vdr-front', 'VDR_ENABLE_EXTERNAL_RECCMD', self.D_F_ENABLE_EXTERNAL_RECCMD).replace('true','1').replace('false','0').replace('"', '')
+
+                self.struct['vdrfront']['settings']['ext_reccmd_path']['value'] = \
+                self.oe.get_service_option('vdr-front', 'VDR_EXTERNAL_RECCMD_PATH', self.D_F_EXTERNAL_RECCMD_PATH).replace('"', '')
+
+                self.struct['vdrfront']['settings']['enable_charset_override']['value'] = \
+                self.oe.get_service_option('vdr-front', 'VDR_ENABLE_CHARSET_OVERRIDE', self.D_F_ENABLE_CHARSET_OVERRIDE).replace('true','1').replace('false','0').replace('"', '')
+
+                self.struct['vdrfront']['settings']['charset_override']['value'] = \
+                self.oe.get_service_option('vdr-front', 'VDR_CHARSET_OVERRIDE_STR', self.D_F_CHARSET_OVERRIDE_STR).replace('"', '')
+
+                self.struct['vdrfront']['settings']['vdr_video_dir']['value'] = \
+                self.oe.get_service_option('vdr-front', 'VDR_VIDEO_DIR', self.D_F_VDR_VIDEO_DIR).replace('"', '')
+
+                self.struct['vdrfront']['settings']['vdr_debug']['value'] = \
+                self.oe.get_service_option('vdr-front', 'VDR_DEBUG', self.D_F_VDR_DEBUG).replace('true','1').replace('false','0').replace('"', '')
+
+                self.struct['vdrfront']['settings']['enable_iptv']['value'] = \
+                self.oe.get_service_option('vdr-front', 'VDR_ENABLE_IPTV', self.D_F_ENABLE_IPTV).replace('true','1').replace('false','0').replace('"', '')
+
+                self.struct['vdrfront']['settings']['num_devices']['value'] = \
+                self.oe.get_service_option('vdr-front', 'VDR_IPTV_NUM_DEVICES', self.D_F_IPTV_NUM_DEVICES).replace('"', '')
+
+                self.struct['vdrfront']['settings']['enable_streamdev_client']['value'] = \
+                self.oe.get_service_option('vdr-front', 'VDR_ENABLE_STREAMDEV_CLIENT', self.D_F_ENABLE_STREAMDEV_CLIENT).replace('true','1').replace('false','0').replace('"', '')
+
+                self.struct['vdrfront']['settings']['enable_streamdev_server']['value'] = \
+                self.oe.get_service_option('vdr-front', 'VDR_ENABLE_STREAMDEV_SERVER', self.D_F_ENABLE_STREAMDEV_SERVER).replace('true','1').replace('false','0').replace('"', '')
+
+                self.struct['vdrfront']['settings']['enable_wirbelscan']['value'] = \
+                self.oe.get_service_option('vdr-front', 'VDR_ENABLE_WIRBELSCAN', self.D_F_ENABLE_WIRBELSCAN).replace('true','1').replace('false','0').replace('"', '')
+
+                self.struct['vdrfront']['settings']['enable_live']['value'] = \
+                self.oe.get_service_option('vdr-front', 'VDR_ENABLE_LIVE', self.D_F_ENABLE_LIVE).replace('true','1').replace('false','0').replace('"', '')
+
+                self.struct['vdrfront']['settings']['live_ip']['value'] = \
+                self.oe.get_service_option('vdr-front', 'VDR_LIVE_IP', self.D_F_LIVE_IP).replace('"', '')
+
+                self.struct['vdrfront']['settings']['live_port']['value'] = \
+                self.oe.get_service_option('vdr-front', 'VDR_LIVE_PORT', self.D_F_LIVE_PORT).replace('"', '')
+
+                self.struct['vdrfront']['settings']['enable_epgsearch']['value'] = \
+                self.oe.get_service_option('vdr-front', 'VDR_ENABLE_EPGSEARCH', self.D_F_ENABLE_EPGSEARCH).replace('true','1').replace('false','0').replace('"', '')
+
+                self.struct['vdrfront']['settings']['enable_xmltv2vdr']['value'] = \
+                self.oe.get_service_option('vdr-front', 'VDR_ENABLE_XMLTV2VDR', self.D_F_ENABLE_XMLTV2VDR).replace('true','1').replace('false','0').replace('"', '')
+
+                self.struct['vdrfront']['settings']['enable_softcam']['value'] = \
+                self.oe.get_service_option('vdr-front', 'VDR_ENABLE_SOFTCAM', self.D_F_ENABLE_SOFTCAM).replace('true','1').replace('false','0').replace('"', '')
+
+                self.struct['vdrfront']['settings']['softcam_option']['value'] = \
+                self.oe.get_service_option('vdr-front', 'VDR_DVBAPI_OPTION', self.D_F_SOFTCAM_OPTION).replace('"', '')
+
+                self.struct['vdrfront']['settings']['enable_dummydevice']['value'] = \
+                self.oe.get_service_option('vdr-front', 'VDR_ENABLE_DUMMYDEVICE', self.D_F_ENABLE_DUMMYDEVICE).replace('true','1').replace('false','0').replace('"', '')
+
+                self.struct['vdrfront']['settings']['enable_satip']['value'] = \
+                self.oe.get_service_option('vdr-front', 'VDR_ENABLE_SATIP', self.D_F_ENABLE_SATIP).replace('true','1').replace('false','0').replace('"', '')
+
+                self.struct['vdrfront']['settings']['enable_epgfixer']['value'] = \
+                self.oe.get_service_option('vdr-front', 'VDR_ENABLE_EPGFIXER', self.D_F_ENABLE_EPGFIXER).replace('true','1').replace('false','0').replace('"', '')
+
+                self.struct['vdrfront']['settings']['enable_restfulapi']['value'] = \
+                self.oe.get_service_option('vdr-front', 'VDR_ENABLE_RESTFULAPI', self.D_F_ENABLE_RESTFULAPI).replace('true','1').replace('false','0').replace('"', '')
+
+                self.struct['vdrfront']['settings']['restfulapi_ip']['value'] = \
+                self.oe.get_service_option('vdr-front', 'VDR_RESTFULAPI_IP', self.D_F_RESTFULAPI_IP).replace('"', '')
+
+                self.struct['vdrfront']['settings']['restfulapi_port']['value'] = \
+                self.oe.get_service_option('vdr-front', 'VDR_RESTFULAPI_PORT', self.D_F_RESTFULAPI_PORT).replace('"', '')
+
+                self.struct['vdrfront']['settings']['enable_ddci2']['value'] = \
+                self.oe.get_service_option('vdr-front', 'VDR_ENABLE_DDCI2', self.D_F_ENABLE_DDCI2).replace('true','1').replace('false','0').replace('"', '')
+
+                self.struct['vdrfront']['settings']['enable_dynamite']['value'] = \
+                self.oe.get_service_option('vdr-front', 'VDR_ENABLE_DYNAMITE', self.D_F_ENABLE_DYNAMITE).replace('true','1').replace('false','0').replace('"', '')
+
+                self.struct['vdrfront']['settings']['enable_robotv']['value'] = \
+                self.oe.get_service_option('vdr-front', 'VDR_ENABLE_ROBOTV', self.D_F_ENABLE_ROBOTV).replace('true','1').replace('false','0').replace('"', '')
+
+                self.struct['vdrfront']['settings']['enable_channellists']['value'] = \
+                self.oe.get_service_option('vdr-front', 'VDR_ENABLE_CHANNELLISTS', self.D_F_ENABLE_CHANNELLISTS).replace('true','1').replace('false','0').replace('"', '')
+
+                self.struct['vdrfront']['settings']['enable_pin']['value'] = \
+                self.oe.get_service_option('vdr-front', 'VDR_ENABLE_PIN', self.D_F_ENABLE_PIN).replace('true','1').replace('false','0').replace('"', '')
+
+                self.struct['vdrfront']['settings']['enable_femon']['value'] = \
+                self.oe.get_service_option('vdr-front', 'VDR_ENABLE_FEMON', self.D_F_ENABLE_FEMON).replace('true','1').replace('false','0').replace('"', '')
+
+                self.struct['vdrfront']['settings']['enable_systeminfo']['value'] = \
+                self.oe.get_service_option('vdr-front', 'VDR_ENABLE_SYSTEMINFO', self.D_F_ENABLE_SYSTEMINFO).replace('true','1').replace('false','0').replace('"', '')
+
+                self.struct['vdrfront']['settings']['enable_sleeptimer']['value'] = \
+                self.oe.get_service_option('vdr-front', 'VDR_ENABLE_SLEEPTIMER', self.D_F_ENABLE_SLEEPTIMER).replace('true','1').replace('false','0').replace('"', '')
+
+                self.struct['vdrfront']['settings']['enable_filebrowser']['value'] = \
+                self.oe.get_service_option('vdr-front', 'VDR_ENABLE_FILEBROWSER', self.D_F_ENABLE_FILEBROWSER).replace('true','1').replace('false','0').replace('"', '')
+
+                self.struct['vdrfront']['settings']['enable_lcdproc']['value'] = \
+                self.oe.get_service_option('vdr-front', 'VDR_ENABLE_LCDPROC', self.D_F_ENABLE_LCDPROC).replace('true','1').replace('false','0').replace('"', '')
+
+                self.struct['vdrfront']['settings']['enable_imonlcd']['value'] = \
+                self.oe.get_service_option('vdr-front', 'VDR_ENABLE_IMONLCD', self.D_F_ENABLE_IMONLCD).replace('true','1').replace('false','0').replace('"', '')
+
+                self.struct['vdrfront']['settings']['enable_text2skin']['value'] = \
+                self.oe.get_service_option('vdr-front', 'VDR_ENABLE_TEXT2SKIN', self.D_F_ENABLE_TEXT2SKIN).replace('true','1').replace('false','0').replace('"', '')
+
+                self.struct['vdrfront']['settings']['enable_skinnopacity']['value'] = \
+                self.oe.get_service_option('vdr-front', 'VDR_ENABLE_SKINNOPACITY', self.D_F_ENABLE_SKINNOPACITY).replace('true','1').replace('false','0').replace('"', '')
+
+                self.struct['vdrfront']['settings']['enable_skinflat']['value'] = \
+                self.oe.get_service_option('vdr-front', 'VDR_ENABLE_SKINFLAT', self.D_F_ENABLE_SKINFLAT).replace('true','1').replace('false','0').replace('"', '')
+
+                self.struct['vdrfront']['settings']['enable_flatplus']['value'] = \
+                self.oe.get_service_option('vdr-front', 'VDR_ENABLE_SKINFLATPLUS', self.D_F_ENABLE_SKINFLATPLUS).replace('true','1').replace('false','0').replace('"', '')
+
+                self.struct['vdrfront']['settings']['enable_skindesigner']['value'] = \
+                self.oe.get_service_option('vdr-front', 'VDR_ENABLE_SKINDESIGNER', self.D_F_ENABLE_SKINDESIGNER).replace('true','1').replace('false','0').replace('"', '')
+
+                self.struct['vdrfront']['settings']['enable_tvguideng']['value'] = \
+                self.oe.get_service_option('vdr-front', 'VDR_ENABLE_TVGUIDENG', self.D_F_ENABLE_TVGUIDENG).replace('true','1').replace('false','0').replace('"', '')
+
+                self.struct['vdrfront']['settings']['enable_weatherforecast']['value'] = \
+                self.oe.get_service_option('vdr-front', 'VDR_ENABLE_WEATHERFORECAST', self.D_F_ENABLE_WEATHERFORECAST).replace('true','1').replace('false','0').replace('"', '')
+
+                self.struct['vdrfront']['settings']['enable_tvscraper']['value'] = \
+                self.oe.get_service_option('vdr-front', 'VDR_ENABLE_TVSCRAPER', self.D_F_ENABLE_TVSCRAPER).replace('true','1').replace('false','0').replace('"', '')
+
+#                self.struct['vdrfront']['settings']['enable_menuorg']['value'] = \
+#                self.oe.get_service_option('vdr-front', 'VDR_ENABLE_MENUORG', self.D_F_ENABLE_MENUORG).replace('true','1').replace('false','0').replace('"', '')
+
+                self.struct['vdrfront']['settings']['enable_favorites']['value'] = \
+                self.oe.get_service_option('vdr-front', 'VDR_ENABLE_FAVORITES', self.D_F_ENABLE_FAVORITES).replace('true','1').replace('false','0').replace('"', '')
+
+                self.struct['vdrfront']['settings']['vdr_other']['value'] = \
+                self.oe.get_service_option('vdr-front', 'VDR_OTHER', self.D_F_VDR_OTHER_ARG).replace('"', '')
+
+                self.struct['vdrfront']['settings']['vdr_pluginfront']['value'] = \
+                self.oe.get_service_option('vdr-front', 'VDR_FRONT', self.D_F_VDR_FRONT).replace('"', '')
+
+                self.struct['vdrfront']['settings']['vdr_frontvideo']['value'] = \
+                self.oe.get_service_option('vdr-front', 'VDR_OUTPUT_VIDEO', self.D_F_VDR_OUTPUTVIDEO).replace('"', '')
+
+                self.struct['vdrfront']['settings']['vdr_soundsoft']['value'] = \
+                self.oe.get_service_option('vdr-front', 'VDR_SOUND_SOFT', self.D_F_VDR_SOUNDSOFT).replace('"', '')
+
+                self.struct['vdrfront']['settings']['vdr_soundxine']['value'] = \
+                self.oe.get_service_option('vdr-front', 'VDR_SOUND_XINE', self.D_F_VDR_SOUNDXINE).replace('"', '')
+
+                self.struct['vdrfront']['settings']['vdr_softparam']['value'] = \
+                self.oe.get_service_option('vdr-front', 'VDR_SOFT_PARAM', self.D_F_VDR_SOFTPARAM).replace('"', '')
+
+                self.struct['vdrfront']['settings']['vdr_xineparam']['value'] = \
+                self.oe.get_service_option('vdr-front', 'VDR_XINE_PARAM', self.D_F_VDR_XINEPARAM).replace('"', '')
+
+            else:
+                self.struct['vdrfront']['hidden'] = 'true'
+
+            #dvb
+
+            if (os.path.isfile(self.TVHEADEND_DAEMON_START) and os.path.isfile(self.TVHEADEND_DAEMON) and tvheadenabled=='1') or \
+            (os.path.isfile(self.VDR_DAEMON_START) and os.path.isfile(self.VDR_DAEMON) and vdrenabled=='1') or \
+            (os.path.isfile(self.VDR_DAEMON_START) and os.path.isfile(self.VDR_DAEMON_FRONT) and vdrfrontenabled=='1'):
+
+                if 'hidden' in self.struct['dvb']:
+                    del self.struct['dvb']['hidden']
+
+                self.struct['dvb']['settings']['wait_for_feinit']['value'] = \
+                self.oe.get_service_option('dvb', 'DVB_WAIT_FOR_FEINIT', self.D_WAIT_FOR_FEINIT).replace('true','1').replace('false','0').replace('"', '')
+
+                self.struct['dvb']['settings']['num_adapters']['value'] = \
+                self.oe.get_service_option('dvb', 'DVB_NUM_ADAPTERS', self.D_NUM_ADAPTERS).replace('"', '')
+
+                self.struct['dvb']['settings']['remove_modules']['value'] = \
+                self.oe.get_service_option('dvb', 'DVB_REMOVE_MODULES', self.D_REMOVE_MODULES).replace('"', '')
+
+            else:
+                self.struct['dvb']['hidden'] = 'true'
+
+            #oscam
+
+            if os.path.isfile(self.OSCAM_DAEMON_START) and os.path.isfile(self.OSCAM_DAEMON):
+
+                if 'hidden' in self.struct['oscam']:
+                    del self.struct['oscam']['hidden']
+
+                self.struct['oscam']['settings']['enable_oscam']['value'] = oscamenabled
+
+                self.struct['oscam']['settings']['oscam_debug']['value'] = \
+                self.oe.get_service_option('oscam', 'OSCAM_DEBUG', self.D_OSCAM_DEBUG).replace('"', '')
+
+                self.struct['oscam']['settings']['restart_on_resume']['value'] = \
+                self.oe.get_service_option('oscam', 'RESTART_ON_RESUME', self.D_RESTART_ON_RESUME).replace('true','1').replace('false','0').replace('"', '')
+
+            else:
+                self.struct['oscam']['hidden'] = 'true'
+
+            self.oe.dbg_log('tvservers::load_values', 'exit_function', 0)
+
+        except Exception, e:
+            self.oe.dbg_log('tvservers::load_values', 'ERROR: (%s)' % repr(e))
+
+    def initialize_tvbackend(self, **kwargs):
+        try:
+            self.oe.dbg_log('tvservers::initialize_tvbackend', 'enter_function', 0)
+
+            self.oe.set_busy(1)
+
+            if 'listItem' in kwargs:
+                self.set_value(kwargs['listItem']) 
+
+            state = 1
+            options = {}
+
+            if self.struct['dvb']['settings']['wait_for_feinit']['value'] == '1':
+                val1 = 'true'
+            else:
+                val1 = 'false'
+
+            options['DVB_WAIT_FOR_FEINIT']   = '"%s"' % val1
+            options['DVB_NUM_ADAPTERS'] = '"%s"' % self.struct['dvb']['settings']['num_adapters']['value']
+            options['DVB_REMOVE_MODULES'] = '"%s"' % self.struct['dvb']['settings']['remove_modules']['value']
+
+            self.oe.set_service('dvb', options, state)
+
+            self.initialize_vdr()
+
+            self.initialize_tvheadend()
+
+            self.load_values()
+
+            self.oe.set_busy(0)
+
+            self.oe.dbg_log('tvservers::initialize_tvbackend', 'exit_function', 0)
+
+        except Exception, e:
+            self.oe.set_busy(0)
+            self.oe.dbg_log('tvservers::initialize_tvbackend', 'ERROR: (%s)' % repr(e), 4)
+
+    def initialize_tvheadend(self, **kwargs):
+        try:
+            self.oe.dbg_log('tvservers::initialize_tvheadend', 'enter_function', 0)
+
+            self.oe.set_busy(1)
+
+            if 'listItem' in kwargs:
+                self.set_value(kwargs['listItem'])
+
+            options = {}
+
+            if self.struct['tvbackends']['settings']['tv_backend']['value'] == 'tvheadend':
+
+                state = 1
+
+                if 'hidden' in self.struct['tvheadend']:
+                    del self.struct['tvheadend']['hidden']
+
+                if self.struct['tvheadend']['settings']['preload_capmt_ca']['value'] == '1':
+                    val1 ='true'
+
+                else:
+                    val1 ='false'
+
+                if self.struct['tvheadend']['settings']['tvh_backup']['value'] == '1':
+                    val2 ='true'
+
+                else:
+                    val2 ='false'
+
+                if self.struct['tvheadend']['settings']['tvh_debug']['value'] == '1':
+                    val3 ='true'
+
+                else:
+                    val3 ='false'
+
+                options['TVHEADEND_PRELOAD_CAPMT_CA']   = '"%s"' % val1
+                options['TVHEADEND_BACKUP']   = '"%s"' % val2
+                options['TVHEADEND_DEBUG']   = '"%s"' % val3
+                options['TVHEADEND_ADAPTERS'] = '"%s"' % self.struct['tvheadend']['settings']['tvh_adapters']['value']
+                options['TVHEADEND_OTHER'] = '"%s"' % self.struct['tvheadend']['settings']['tvh_other']['value']
+                options['TVHEADEND_XMLTV_TYPE'] = '"%s"' % self.struct['tvheadend']['settings']['xmltv_type']['value']
+                options['TVHEADEND_XMLTV_LOCATION_FILE'] = '"%s"' % self.struct['tvheadend']['settings']['xmltv_location_file']['value']
+                options['TVHEADEND_XMLTV_LOCATION_WEB'] = '"%s"' % self.struct['tvheadend']['settings']['xmltv_location_web']['value']
+                options['TVHEADEND_XMLTV_LOCATION_SCRIPT'] = '"%s"' % self.struct['tvheadend']['settings']['xmltv_location_script']['value']
+
+            else:
+
+                state = 0
+
+            self.oe.set_service('tvheadend', options, state)
+
+            self.load_values()
+
+            self.oe.set_busy(0)
+
+            self.oe.dbg_log('tvservers::initialize_tvheadend', 'exit_function', 0)
+
+        except Exception, e:
+            self.oe.set_busy(0)
+            self.oe.dbg_log('tvservers::initialize_tvheadend', 'ERROR: (%s)' % repr(e), 4)
+
+    def initialize_vdr(self, **kwargs):
+        try:
+            self.oe.dbg_log('tvservers::initialize_vdr', 'enter_function', 0)
+
+            self.oe.set_busy(1)
+
+            if 'listItem' in kwargs:
+                self.set_value(kwargs['listItem'])
+
+            options = {}
+
+            if self.struct['tvbackends']['settings']['tv_backend']['value'] == 'vdr':
+
+                state = 1
+
+                if 'hidden' in self.struct['vdr']:
+                    del self.struct['vdr']['hidden']
+
+                if self.struct['vdr']['settings']['enable_ext_reccmd']['value'] == '1':
+                    val1 = 'true'
+
+                else:
+                    val1 = 'false'
+
+                if self.struct['vdr']['settings']['enable_charset_override']['value'] == '1':
+                    val2 = 'true'
+
+                else:
+                    val2 = 'false'
+
+                if self.struct['vdr']['settings']['vdr_debug']['value'] == '1':
+                    val3 = 'true'
+
+                else:
+                    val3 = 'false'
+
+                if self.struct['vdr']['settings']['enable_iptv']['value'] == '1':
+                    val4 = 'true'
+
+                else:
+                    val4 = 'false'
+
+                if self.struct['vdr']['settings']['enable_streamdev_client']['value'] == '1':
+                    val5 = 'true'
+
+                else:
+                    val5 = 'false'
+
+                if self.struct['vdr']['settings']['enable_streamdev_server']['value'] == '1':
+                    val6 = 'true'
+
+                else:
+                    val6 = 'false'
+
+                if self.struct['vdr']['settings']['enable_wirbelscan']['value'] == '1':
+                    val7 = 'true'
+
+                else:
+                    val7 = 'false'
+
+                if self.struct['vdr']['settings']['enable_live']['value'] == '1':
+                    val8 = 'true'
+
+                else:
+                    val8 = 'false'
+
+                if self.struct['vdr']['settings']['enable_epgsearch']['value'] == '1':
+                    val9 = 'true'
+
+                else:
+                    val9 = 'false'
+
+                if self.struct['vdr']['settings']['enable_xmltv2vdr']['value'] == '1':
+                    val10 = 'true'
+
+                else:
+                    val10 = 'false'
+
+                if self.struct['vdr']['settings']['enable_softcam']['value'] == '1':
+                    val11 = 'true'
+
+                else:
+                    val11 = 'false'
+
+                if self.struct['vdr']['settings']['enable_dummydevice']['value'] == '1':
+                    val12 = 'true'
+
+                else:
+                    val12 = 'false'
+
+                if self.struct['vdr']['settings']['enable_satip']['value'] == '1':
+                    val13 = 'true'
+
+                else:
+                    val13 = 'false'
+
+                if self.struct['vdr']['settings']['enable_epgfixer']['value'] == '1':
+                    val14 = 'true'
+
+                else:
+                    val14 = 'false'
+
+                if self.struct['vdr']['settings']['enable_restfulapi']['value'] == '1':
+                    val15 = 'true'
+
+                else:
+                    val15 = 'false'
+
+                if self.struct['vdr']['settings']['enable_ddci2']['value'] == '1':
+                    val16 = 'true'
+
+                else:
+                    val16 = 'false'
+
+                if self.struct['vdr']['settings']['enable_dynamite']['value'] == '1':
+                    val17 = 'true'
+
+                else:
+                    val17 = 'false'
+
+                if self.struct['vdr']['settings']['enable_robotv']['value'] == '1':
+                    val18 = 'true'
+
+                else:
+                    val18 = 'false'
+
+                options['VDR_ENABLE_EXTERNAL_RECCMD'] = '"%s"' % val1
+                options['VDR_EXTERNAL_RECCMD_PATH'] = '"%s"' % self.struct['vdr']['settings']['ext_reccmd_path']['value']
+                options['VDR_ENABLE_CHARSET_OVERRIDE'] = '"%s"' % val2
+                options['VDR_CHARSET_OVERRIDE_STR'] = '"%s"' % self.struct['vdr']['settings']['charset_override']['value']
+                options['VDR_VIDEO_DIR'] = '"%s"' % self.struct['vdr']['settings']['vdr_video_dir']['value']
+                options['VDR_DEBUG'] = '"%s"' % val3
+                options['VDR_PVR_PLUGIN'] = '"%s"' % self.struct['vdr']['settings']['vdr_pvr_plugin']['value']
+                options['VDR_ENABLE_IPTV'] = '"%s"' % val4
+                options['VDR_IPTV_NUM_DEVICES'] = '"%s"' % self.struct['vdr']['settings']['num_devices']['value']
+                options['VDR_ENABLE_STREAMDEV_CLIENT'] = '"%s"' % val5
+                options['VDR_ENABLE_STREAMDEV_SERVER'] = '"%s"' % val6
+                options['VDR_ENABLE_WIRBELSCAN'] = '"%s"' % val7
+                options['VDR_ENABLE_LIVE'] = '"%s"' % val8
+                options['VDR_LIVE_IP'] = '"%s"' % self.struct['vdr']['settings']['live_ip']['value']
+                options['VDR_LIVE_PORT'] = '"%s"' % self.struct['vdr']['settings']['live_port']['value']
+                options['VDR_ENABLE_EPGSEARCH'] = '"%s"' % val9
+                options['VDR_ENABLE_XMLTV2VDR'] = '"%s"' % val10
+                options['VDR_ENABLE_SOFTCAM'] = '"%s"' % val11
+                options['VDR_DVBAPI_OPTION'] = '"%s"' % self.struct['vdr']['settings']['softcam_option']['value']
+                options['VDR_ENABLE_DUMMYDEVICE'] = '"%s"' % val12
+                options['VDR_ENABLE_SATIP'] = '"%s"' % val13
+                options['VDR_ENABLE_EPGFIXER'] = '"%s"' % val14
+                options['VDR_ENABLE_RESTFULAPI'] = '"%s"' % val15
+                options['VDR_RESTFULAPI_IP'] = '"%s"' % self.struct['vdr']['settings']['restfulapi_ip']['value']
+                options['VDR_RESTFULAPI_PORT'] = '"%s"' % self.struct['vdr']['settings']['restfulapi_port']['value']
+                options['VDR_ENABLE_DDCI2'] = '"%s"' % val16
+                options['VDR_ENABLE_DYNAMITE'] = '"%s"' % val17
+                options['VDR_ENABLE_ROBOTV'] = '"%s"' % val18
+                options['VDR_OTHER'] = '"%s"' % self.struct['vdr']['settings']['vdr_other']['value']
+
+            else:
+
+                state = 0
+
+            self.oe.set_service('vdr', options, state)
+
+            self.load_values()
+
+            self.oe.set_busy(0)
+
+            self.oe.dbg_log('tvservers::initialize_vdr', 'exit_function', 0)
+
+        except Exception, e:
+            self.oe.set_busy(0)
+            self.oe.dbg_log('tvservers::initialize_vdr', 'ERROR: (%s)' % repr(e), 4)
+
+    def initialize_oscam(self, **kwargs):
+        try:
+            self.oe.dbg_log('tvservers::initialize_oscam', 'enter_function', 0)
+
+            self.oe.set_busy(1)
+
+            if 'listItem' in kwargs:
+                self.set_value(kwargs['listItem'])
+
+            options = {}
+
+            if self.struct['oscam']['settings']['enable_oscam']['value'] == '1':
+
+                state = 1
+
+                if self.struct['oscam']['settings']['restart_on_resume']['value'] == '1':
+                    val1 = 'true'
+                else:
+                    val1 = 'false'
+
+                options['OSCAM_DEBUG']   = '"%s"' % self.struct['oscam']['settings']['oscam_debug']['value']
+                options['RESTART_ON_RESUME'] = '"%s"' % val1
+
+            else:
+
+                state = 0
+
+            self.oe.set_service('oscam', options, state)
+
+            self.load_values()
+
+            self.oe.set_busy(0)
+
+            self.oe.dbg_log('tvservers::initialize_oscam', 'exit_function', 0)
+
+        except Exception, e:
+            self.oe.set_busy(0)
+            self.oe.dbg_log('tvservers::initialize_oscam', 'ERROR: (%s)' % repr(e), 4)
+
+    def initialize_tvfrontends(self, **kwargs):
+        try:
+            self.oe.dbg_log('tvservers::initialize_tvfrontends', 'enter_function', 0)
+
+            self.oe.set_busy(1)
+
+            if 'listItem' in kwargs:
+                self.set_value(kwargs['listItem'])
+
+            self.initialize_vdrfront()
+
+            self.load_values()
+
+            self.oe.set_busy(0)
+
+            self.oe.dbg_log('tvservers::initialize_tvfrontends', 'exit_function', 0)
+
+        except Exception, e:
+            self.oe.set_busy(0)
+            self.oe.dbg_log('tvservers::initialize_tvfrontends', 'ERROR: (%s)' % repr(e), 4)
+
+    def initialize_vdrfront(self, **kwargs):
+        try:
+            self.oe.dbg_log('tvservers::initialize_vdrfront', 'enter_function', 0)
+
+            self.oe.set_busy(1)
+
+            if 'listItem' in kwargs:
+                self.set_value(kwargs['listItem'])
+
+            options = {}
+
+            if self.struct['tvfrontends']['settings']['tv_frontends']['value'] == 'vdr':
+
+                state = 1
+
+                if 'hidden' in self.struct['vdrfront']:
+                    del self.struct['vdrfront']['hidden']
+
+                if self.struct['vdrfront']['settings']['enable_ext_reccmd']['value'] == '1':
+                    val1 = 'true'
+
+                else:
+                    val1 = 'false'
+
+                if self.struct['vdrfront']['settings']['enable_charset_override']['value'] == '1':
+                    val2 = 'true'
+
+                else:
+                    val2 = 'false'
+
+                if self.struct['vdrfront']['settings']['vdr_debug']['value'] == '1':
+                    val3 = 'true'
+
+                else:
+                    val3 = 'false'
+
+                if self.struct['vdrfront']['settings']['enable_iptv']['value'] == '1':
+                    val4 = 'true'
+
+                else:
+                    val4 = 'false'
+
+                if self.struct['vdrfront']['settings']['enable_streamdev_client']['value'] == '1':
+                    val5 = 'true'
+
+                else:
+                    val5 = 'false'
+
+                if self.struct['vdrfront']['settings']['enable_streamdev_server']['value'] == '1':
+                    val6 = 'true'
+
+                else:
+                    val6 = 'false'
+
+                if self.struct['vdrfront']['settings']['enable_wirbelscan']['value'] == '1':
+                    val7 = 'true'
+
+                else:
+                    val7 = 'false'
+
+                if self.struct['vdrfront']['settings']['enable_live']['value'] == '1':
+                    val8 = 'true'
+
+                else:
+                    val8 = 'false'
+
+                if self.struct['vdrfront']['settings']['enable_epgsearch']['value'] == '1':
+                    val9 = 'true'
+
+                else:
+                    val9 = 'false'
+
+                if self.struct['vdrfront']['settings']['enable_xmltv2vdr']['value'] == '1':
+                    val10 = 'true'
+
+                else:
+                    val10 = 'false'
+
+                if self.struct['vdrfront']['settings']['enable_softcam']['value'] == '1':
+                    val11 = 'true'
+
+                else:
+                    val11 = 'false'
+
+                if self.struct['vdrfront']['settings']['enable_dummydevice']['value'] == '1':
+                    val12 = 'true'
+
+                else:
+                    val12 = 'false'
+
+                if self.struct['vdrfront']['settings']['enable_satip']['value'] == '1':
+                    val13 = 'true'
+
+                else:
+                    val13 = 'false'
+
+                if self.struct['vdrfront']['settings']['enable_epgfixer']['value'] == '1':
+                    val14 = 'true'
+
+                else:
+                    val14 = 'false'
+
+                if self.struct['vdrfront']['settings']['enable_restfulapi']['value'] == '1':
+                    val15 = 'true'
+
+                else:
+                    val15 = 'false'
+
+                if self.struct['vdrfront']['settings']['enable_ddci2']['value'] == '1':
+                    val16 = 'true'
+
+                else:
+                    val16 = 'false'
+
+                if self.struct['vdrfront']['settings']['enable_dynamite']['value'] == '1':
+                    val17 = 'true'
+
+                else:
+                    val17 = 'false'
+
+                if self.struct['vdrfront']['settings']['enable_robotv']['value'] == '1':
+                    val18 = 'true'
+
+                else:
+                    val18 = 'false'
+
+                if self.struct['vdrfront']['settings']['enable_channellists']['value'] == '1':
+                    val19 = 'true'
+
+                else:
+                    val19 = 'false'
+
+                if self.struct['vdrfront']['settings']['enable_pin']['value'] == '1':
+                    val20 = 'true'
+
+                else:
+                    val20 = 'false'
+
+                if self.struct['vdrfront']['settings']['enable_femon']['value'] == '1':
+                    val21 = 'true'
+
+                else:
+                    val21 = 'false'
+
+                if self.struct['vdrfront']['settings']['enable_systeminfo']['value'] == '1':
+                    val22 = 'true'
+
+                else:
+                    val22 = 'false'
+
+                if self.struct['vdrfront']['settings']['enable_sleeptimer']['value'] == '1':
+                    val23 = 'true'
+
+                else:
+                    val23 = 'false'
+
+                if self.struct['vdrfront']['settings']['enable_filebrowser']['value'] == '1':
+                    val24 = 'true'
+
+                else:
+                    val24 = 'false'
+
+                if self.struct['vdrfront']['settings']['enable_lcdproc']['value'] == '1' and self.struct['vdrfront']['settings']['enable_imonlcd']['value'] == '0':
+                    val25 = 'true'
+                    val26 = 'false'
+
+                else:
+
+                    if self.struct['vdrfront']['settings']['enable_lcdproc']['value'] == '0' and self.struct['vdrfront']['settings']['enable_imonlcd']['value'] == '1':
+                        val25 = 'false'
+                        val26 = 'true'
+
+                    else:
+                        val26 = 'false'
+
+                        if self.struct['vdrfront']['settings']['enable_lcdproc']['value'] == '1':
+                            val25 = 'true'
+
+                        else:
+                            val25 = 'false'
+
+
+                if self.struct['vdrfront']['settings']['enable_text2skin']['value'] == '1':
+                    val27 = 'true'
+
+                else:
+                    val27 = 'false'
+
+                if self.struct['vdrfront']['settings']['enable_skinnopacity']['value'] == '1':
+                    val28 = 'true'
+
+                else:
+                    val28 = 'false'
+
+                if self.struct['vdrfront']['settings']['enable_skinflat']['value'] == '1':
+                    val29 = 'true'
+
+                else:
+                    val29 = 'false'
+
+                if self.struct['vdrfront']['settings']['enable_flatplus']['value'] == '1':
+                    val30 = 'true'
+
+                else:
+                    val30 = 'false'
+
+                if self.struct['vdrfront']['settings']['enable_skindesigner']['value'] == '1':
+                    val31 = 'true'
+                    if self.struct['vdrfront']['settings']['enable_tvguideng']['value'] == '1':
+                        val32 = 'true'
+
+                    else:
+                        val32 = 'false'
+
+                    if self.struct['vdrfront']['settings']['enable_weatherforecast']['value'] == '1':
+                        val33 = 'true'
+
+                    else:
+                       val33 = 'false'
+                else:
+                    val31 = 'false'
+                    val32 = 'false'
+                    val33 = 'false'
+
+                if self.struct['vdrfront']['settings']['enable_tvscraper']['value'] == '1':
+                    val34 = 'true'
+
+                else:
+                    val34 = 'false'
+
+#                if self.struct['vdrfront']['settings']['enable_menuorg']['value'] == '1':
+#                    val35 = 'true'
+#
+#                else:
+#                    val35 = 'false'
+
+                if self.struct['vdrfront']['settings']['enable_favorites']['value'] == '1':
+                    val36 = 'true'
+
+                else:
+                    val36 = 'false'
+
+                options['VDR_ENABLE_EXTERNAL_RECCMD'] = '"%s"' % val1
+                options['VDR_EXTERNAL_RECCMD_PATH'] = '"%s"' % self.struct['vdrfront']['settings']['ext_reccmd_path']['value']
+                options['VDR_ENABLE_CHARSET_OVERRIDE'] = '"%s"' % val2
+                options['VDR_CHARSET_OVERRIDE_STR'] = '"%s"' % self.struct['vdrfront']['settings']['charset_override']['value']
+                options['VDR_VIDEO_DIR'] = '"%s"' % self.struct['vdrfront']['settings']['vdr_video_dir']['value']
+                options['VDR_DEBUG'] = '"%s"' % val3
+                options['VDR_ENABLE_IPTV'] = '"%s"' % val4
+                options['VDR_IPTV_NUM_DEVICES'] = '"%s"' % self.struct['vdrfront']['settings']['num_devices']['value']
+                options['VDR_ENABLE_STREAMDEV_CLIENT'] = '"%s"' % val5
+                options['VDR_ENABLE_STREAMDEV_SERVER'] = '"%s"' % val6
+                options['VDR_ENABLE_WIRBELSCAN'] = '"%s"' % val7
+                options['VDR_ENABLE_LIVE'] = '"%s"' % val8
+                options['VDR_LIVE_IP']   = '"%s"' % self.struct['vdrfront']['settings']['live_ip']['value']
+                options['VDR_LIVE_PORT'] = '"%s"' % self.struct['vdrfront']['settings']['live_port']['value']
+                options['VDR_ENABLE_EPGSEARCH'] = '"%s"' % val9
+                options['VDR_ENABLE_XMLTV2VDR'] = '"%s"' % val10
+                options['VDR_ENABLE_SOFTCAM'] = '"%s"' % val11
+                options['VDR_DVBAPI_OPTION'] = '"%s"' % self.struct['vdrfront']['settings']['softcam_option']['value']
+                options['VDR_ENABLE_DUMMYDEVICE'] = '"%s"' % val12
+                options['VDR_ENABLE_SATIP'] = '"%s"' % val13
+                options['VDR_ENABLE_EPGFIXER'] = '"%s"' % val14
+                options['VDR_ENABLE_RESTFULAPI'] = '"%s"' % val15
+                options['VDR_RESTFULAPI_IP'] = '"%s"' % self.struct['vdrfront']['settings']['restfulapi_ip']['value']
+                options['VDR_RESTFULAPI_PORT'] = '"%s"' % self.struct['vdrfront']['settings']['restfulapi_port']['value']
+                options['VDR_ENABLE_DDCI2'] = '"%s"' % val16
+                options['VDR_ENABLE_DYNAMITE'] = '"%s"' % val17
+                options['VDR_ENABLE_ROBOTV'] = '"%s"' % val18
+                options['VDR_ENABLE_CHANNELLISTS'] = '"%s"' % val19
+                options['VDR_ENABLE_PIN'] = '"%s"' % val20
+                options['VDR_ENABLE_FEMON'] = '"%s"' % val21
+                options['VDR_ENABLE_SYSTEMINFO'] = '"%s"' % val22
+                options['VDR_ENABLE_SLEEPTIMER'] = '"%s"' % val23
+                options['VDR_ENABLE_FILEBROWSER'] = '"%s"' % val24
+                options['VDR_ENABLE_LCDPROC'] = '"%s"' % val25
+                options['VDR_ENABLE_IMONLCD'] = '"%s"' % val26
+                options['VDR_ENABLE_TEXT2SKIN'] = '"%s"' % val27
+                options['VDR_ENABLE_SKINNOPACITY'] = '"%s"' % val28
+                options['VDR_ENABLE_SKINFLAT'] = '"%s"' % val29
+                options['VDR_ENABLE_SKINFLATPLUS'] = '"%s"' % val30
+                options['VDR_ENABLE_SKINDESIGNER'] = '"%s"' % val31
+                options['VDR_ENABLE_TVGUIDENG'] = '"%s"' % val32
+                options['VDR_ENABLE_WEATHERFORECAST'] = '"%s"' % val33
+                options['VDR_ENABLE_TVSCRAPER'] = '"%s"' % val34
+#                options['VDR_ENABLE_MENUORG'] = '"%s"' % val35
+                options['VDR_ENABLE_FAVORITES'] = '"%s"' % val36
+                options['VDR_OTHER'] = '"%s"' % self.struct['vdrfront']['settings']['vdr_other']['value']
+                options['VDR_FRONT'] = '"%s"' % self.struct['vdrfront']['settings']['vdr_pluginfront']['value']
+                options['VDR_OUTPUT_VIDEO'] = '"%s"' % self.struct['vdrfront']['settings']['vdr_frontvideo']['value']
+                options['VDR_SOUND_SOFT'] = '"%s"' % self.struct['vdrfront']['settings']['vdr_soundsoft']['value']
+                options['VDR_SOUND_XINE'] = '"%s"' % self.struct['vdrfront']['settings']['vdr_soundxine']['value']
+                options['VDR_SOFT_PARAM'] = '"%s"' % self.struct['vdrfront']['settings']['vdr_softparam']['value']
+                options['VDR_XINE_PARAM'] = '"%s"' % self.struct['vdrfront']['settings']['vdr_xineparam']['value']
+
+                self.oe.dbg_log('tvservers::initialize_vdrfront', 'save option', 0)
+
+            else:
+
+                state = 0
+
+            self.oe.set_service('vdr-front', options, state)
+
+            self.load_values()
+
+            self.oe.set_busy(0)
+
+            self.oe.dbg_log('tvservers::initialize_vdrfront', 'exit_function', 0)
+
+        except Exception, e:
+            self.oe.set_busy(0)
+            self.oe.dbg_log('tvservers::initialize_vdrfront', 'ERROR: (%s)' % repr(e), 4)
+
+    def exit(self):
+        try:
+            self.oe.dbg_log('tvservers::exit', 'enter_function', 0)
+            self.oe.dbg_log('tvservers::exit', 'exit_function', 0)
+
+        except Exception, e:
+            self.oe.dbg_log('tvservers::exit', 'ERROR: (%s)' % repr(e), 4)
+
+    def do_wizard(self):
+        try:
+            self.oe.dbg_log('tvservers::do_wizard', 'enter_function', 0)
+            self.oe.winOeMain.set_wizard_title(self.oe._(34000))
+            self.oe.winOeMain.set_wizard_text(self.oe._(42000)+'[CR][CR]'+self.oe._(42001))
+            self.oe.winOeMain.set_wizard_button_title(self.oe._(35000))
+            self.set_wizard_buttons()
+            self.oe.dbg_log('tvservers::do_wizard', 'exit_function', 0)
+
+        except Exception, e:
+            self.oe.dbg_log('tvservers::do_wizard', 'ERROR: (%s)' % repr(e))
+
+    def set_wizard_buttons(self):
+        try:
+            self.oe.dbg_log('tvservers::set_wizard_buttons', 'enter_function', 0)
+
+            self.oe.winOeMain.set_wizard_button_2(self.oe._(34000).encode('utf-8')+self.get_tvbackend(), self,'select_tvbackend')
+
+            self.oe.dbg_log('tvservers::set_wizard_buttons', 'exit_function', 0)
+
+        except Exception, e:
+            self.oe.dbg_log('tvservers::set_wizard_buttons', 'ERROR: (%s)' % repr(e))
+
+    def get_tvbackend(self):
+        try:
+            current_tv_backend = ':'+self.struct['tvbackends']['settings']['tv_backend']['value']
+            return current_tv_backend
+
+        except Exception, e:
+            self.oe.dbg_log('tvservers::get_tvbackend()','ERROR: (%s)' % repr(e))
+
+    def select_tvbackend(self):
+        try:
+            self.oe.dbg_log('tvservers::select_tvbackend', 'enter_function', 0)
+
+            defaultValue = self.struct['tvbackends']['settings']['tv_backend']['value']
+            items = self.struct['tvbackends']['settings']['tv_backend']['values']
+            title = self.oe._(35001).encode('utf-8')
+            select_window = xbmcgui.Dialog()
+            ret = select_window.select(title, items)
+            result = items[ret]
+
+            if defaultValue != result:
+                self.struct['tvbackends']['settings']['tv_backend']['value'] = result
+                self.wizard_set_tvbackend()
+                self.oe.winOeMain.set_wizard_button_2(self.oe._(34000).encode('utf-8')+self.get_tvbackend(), self, 'select_tvbackend')
+
+            self.oe.dbg_log('tvservers::select_tvbackend', 'exit_function', 0)
+
+        except Exception, e:
+            self.oe.dbg_log('tvservers::select_tvbackend', 'ERROR: (%s)' % repr(e))
+
+    def wizard_set_tvbackend(self):
+        try:
+            self.oe.dbg_log('tvservers::wizard_set_tvbackend', 'enter_function', 0)
+
+            options = {}
+
+            if self.struct['tvbackends']['settings']['tv_backend']['value'] == 'tvheadend':
+                self.oe.set_service('vdr', options, 0)
+                self.oe.set_service('tvheadend', options, 1)
+
+            if self.struct['tvbackends']['settings']['tv_backend']['value'] == 'vdr':
+                self.oe.set_service('vdr', options, 1)
+                self.oe.set_service('tvheadend', options, 0)
+
+            if self.struct['tvbackends']['settings']['tv_backend']['value'] == 'none':
+                self.oe.set_service('vdr', options, 0)
+                self.oe.set_service('tvheadend', options, 0)
+
+            self.initialize_tvbackend()
+            self.initialize_tvheadend()
+            self.initialize_vdr()
+            self.initialize_tvfrontends()
+            self.initialize_vdrfront()
+            self.initialize_oscam()
+            self.load_values()
+
+            self.oe.dbg_log('tvservers::wizard_set_tvbackend', 'exit_function', 0)
+
+        except Exception, e:
+            self.oe.dbg_log('tvservers::wizard_set_tvbackend', 'ERROR: (%s)' % repr(e)) 
+
