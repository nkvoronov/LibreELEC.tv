From ae3215d37ca2a55642bcae6c83c3612e26275711 Mon Sep 17 00:00:00 2001
From: Luc Verhaegen <libv@skynet.be>
Date: Thu, 8 Aug 2019 16:27:37 +0200
Subject: [PATCH] kms:sunxi: add engine->crtc_mode_set() hook

This exposes both shortcomings in universal planes, and the superfluous
intermediate structure of _engine.

Our backends are half the conceptual old-skool style CRTC, and half the
sequencer/composer. It does not need to have any layer enabled or any
buffer attached to do something useful, it can just show a background
colour. Our 4 main layers are fully independent and can be ordered
(almost) at will. There is no primary layer.

Universal planes still asume that there is a primary layer. And also do
limited checking on whether this actually true.

The sun4i driver has, for some reason, an _engine struct in between,
that serves no purpose other than to provide separation where no
separation is needed, and it is clear in several cases that this
separation has holes in it. It also is a psychological barrier for
exposing things as the hardware sees it.

So instead of quickly bolting up some code to set the crtc width and
height in the backend, it was deferred to setting the primary plane.

So while KMS assumes that there is a primary plane, it never enforces
the primary plane to be the same dimensions as the CRTC.

So one is able to set the faux primary plane to whatever dimensions one
likes, which then has the backend set to those dimensions, which then
trips up our whole setup...

A very avoidable problem, on multiple fronts.

Also, we set interlacing with _every_ plane format set. This while this
conceptually belongs to the CRTC. The fact that the information comes
from the modeline should've tipped people off that this was wrong.

Let's at least get rid of this engine struct in future, and have direct
code dependencies between modules, so that at least this psychological
barrier disappears.

Signed-off-by: Luc Verhaegen <libv@skynet.be>
---
 drivers/gpu/drm/sun4i/sun4i_backend.c | 43 ++++++++++++++-------------
 drivers/gpu/drm/sun4i/sun4i_crtc.c    |  2 ++
 drivers/gpu/drm/sun4i/sun8i_mixer.c   |  7 +++++
 drivers/gpu/drm/sun4i/sunxi_engine.h  |  7 +++++
 4 files changed, 39 insertions(+), 20 deletions(-)

diff --git a/drivers/gpu/drm/sun4i/sun4i_backend.c b/drivers/gpu/drm/sun4i/sun4i_backend.c
index 606b33a28be5..4d7a33d0f77f 100644
--- a/drivers/gpu/drm/sun4i/sun4i_backend.c
+++ b/drivers/gpu/drm/sun4i/sun4i_backend.c
@@ -164,6 +164,28 @@ bool sun4i_backend_format_is_supported(uint32_t fmt, uint64_t modifier)
 	return 0;
 }
 
+static int sun4i_backend_crtc_mode_set(struct sunxi_engine *engine,
+				       struct drm_display_mode *mode)
+{
+	DRM_DEBUG_DRIVER("%s(DEBE%d);\n", __func__, engine->id);
+
+	regmap_write(engine->regs, SUN4I_BACKEND_DISSIZE_REG,
+		     SUN4I_BACKEND_DISSIZE(mode->crtc_hdisplay,
+					   mode->crtc_vdisplay));
+
+	if (mode->flags & DRM_MODE_FLAG_INTERLACE) {
+		DRM_DEBUG_DRIVER("%s(DEBE%d): Enabling interlacing.\n",
+				 __func__, engine->id);
+		regmap_update_bits(engine->regs, SUN4I_BACKEND_MODCTL_REG,
+				   SUN4I_BACKEND_MODCTL_ITLMOD_EN,
+				   SUN4I_BACKEND_MODCTL_ITLMOD_EN);
+	} else
+		regmap_update_bits(engine->regs, SUN4I_BACKEND_MODCTL_REG,
+				   SUN4I_BACKEND_MODCTL_ITLMOD_EN, 0);
+
+	return 0;
+}
+
 int sun4i_backend_update_layer_coord(struct sun4i_backend *backend,
 				     int layer, struct drm_plane *plane)
 {
@@ -171,14 +193,6 @@ int sun4i_backend_update_layer_coord(struct sun4i_backend *backend,
 
 	DRM_DEBUG_DRIVER("Updating layer %d\n", layer);
 
-	if (plane->type == DRM_PLANE_TYPE_PRIMARY) {
-		DRM_DEBUG_DRIVER("Primary layer, updating global size W: %u H: %u\n",
-				 state->crtc_w, state->crtc_h);
-		regmap_write(backend->engine.regs, SUN4I_BACKEND_DISSIZE_REG,
-			     SUN4I_BACKEND_DISSIZE(state->crtc_w,
-						   state->crtc_h));
-	}
-
 	/* Set height and width */
 	DRM_DEBUG_DRIVER("Layer size W: %u H: %u\n",
 			 state->crtc_w, state->crtc_h);
@@ -325,24 +339,12 @@ int sun4i_backend_update_layer_formats(struct sun4i_backend *backend,
 {
 	struct drm_plane_state *state = plane->state;
 	struct drm_framebuffer *fb = state->fb;
-	bool interlaced = false;
 	u32 val;
 	int ret;
 
 	/* Clear the YUV mode */
 	regmap_update_bits(backend->engine.regs, SUN4I_BACKEND_ATTCTL_REG0(layer),
 			   SUN4I_BACKEND_ATTCTL_REG0_LAY_YUVEN, 0);
-
-	if (plane->state->crtc)
-		interlaced = plane->state->crtc->state->adjusted_mode.flags
-			& DRM_MODE_FLAG_INTERLACE;
-
-	regmap_update_bits(backend->engine.regs, SUN4I_BACKEND_MODCTL_REG,
-			   SUN4I_BACKEND_MODCTL_ITLMOD_EN,
-			   interlaced ? SUN4I_BACKEND_MODCTL_ITLMOD_EN : 0);
-
-	DRM_DEBUG_DRIVER("Switching display backend interlaced mode %s\n",
-			 interlaced ? "on" : "off");
 
 	if (fb->format->is_yuv)
 		return sun4i_backend_update_yuv_format(backend, layer, plane);
@@ -920,6 +922,7 @@ static const struct sunxi_engine_ops sun4i_backend_engine_ops = {
 	.apply_color_correction		= sun4i_backend_apply_color_correction,
 	.disable_color_correction	= sun4i_backend_disable_color_correction,
 	.vblank_quirk			= sun4i_backend_vblank_quirk,
+	.crtc_mode_set			= sun4i_backend_crtc_mode_set,
 };
 
 static struct regmap_config sun4i_backend_regmap_config = {
diff --git a/drivers/gpu/drm/sun4i/sun4i_crtc.c b/drivers/gpu/drm/sun4i/sun4i_crtc.c
index 9d8504f813a4..cc569d0ec49c 100644
--- a/drivers/gpu/drm/sun4i/sun4i_crtc.c
+++ b/drivers/gpu/drm/sun4i/sun4i_crtc.c
@@ -138,8 +138,10 @@ static void sun4i_crtc_mode_set_nofb(struct drm_crtc *crtc)
 	struct drm_display_mode *mode = &crtc->state->adjusted_mode;
 	struct drm_encoder *encoder = sun4i_crtc_get_encoder(crtc);
 	struct sun4i_crtc *scrtc = drm_crtc_to_sun4i_crtc(crtc);
+	struct sunxi_engine *engine = scrtc->engine;
 
 	sun4i_tcon_mode_set(scrtc->tcon, encoder, mode);
+	engine->ops->crtc_mode_set(engine, mode);
 }
 
 static const struct drm_crtc_helper_funcs sun4i_crtc_helper_funcs = {
diff --git a/drivers/gpu/drm/sun4i/sun8i_mixer.c b/drivers/gpu/drm/sun4i/sun8i_mixer.c
index c2eedf58bf4b..2d6c7c4501b8 100644
--- a/drivers/gpu/drm/sun4i/sun8i_mixer.c
+++ b/drivers/gpu/drm/sun4i/sun8i_mixer.c
@@ -307,9 +307,16 @@ static struct drm_plane **sun8i_layers_init(struct drm_device *drm,
 	return planes;
 }
 
+static int sun8i_mixer_crtc_mode_set(struct sunxi_engine *engine,
+				     struct drm_display_mode *mode)
+{
+	return 0;
+}
+
 static const struct sunxi_engine_ops sun8i_engine_ops = {
 	.commit		= sun8i_mixer_commit,
 	.layers_init	= sun8i_layers_init,
+	.crtc_mode_set	= sun8i_mixer_crtc_mode_set,
 };
 
 static struct regmap_config sun8i_mixer_regmap_config = {
diff --git a/drivers/gpu/drm/sun4i/sunxi_engine.h b/drivers/gpu/drm/sun4i/sunxi_engine.h
index 548710a936d5..1f3aaef2cabc 100644
--- a/drivers/gpu/drm/sun4i/sunxi_engine.h
+++ b/drivers/gpu/drm/sun4i/sunxi_engine.h
@@ -9,6 +9,7 @@
 struct drm_plane;
 struct drm_device;
 struct drm_crtc_state;
+struct drm_display_mode;
 
 struct sunxi_engine;
 
@@ -108,6 +109,12 @@ struct sunxi_engine_ops {
 	 * This function is optional.
 	 */
 	void (*vblank_quirk)(struct sunxi_engine *engine);
+
+	/*
+	 * Sets amongst others, CRTC dimensions, and interlacing.
+	 */
+	int (*crtc_mode_set)(struct sunxi_engine *engine,
+			     struct drm_display_mode *mode);
 };
 
 /**
