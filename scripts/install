#!/bin/bash

# SPDX-License-Identifier: GPL-2.0-or-later
# Copyright (C) 2010-2011 Roman Weber (roman@openelec.tv)
# Copyright (C) 2009-2016 Stephan Raue (stephan@openelec.tv)

. config/options $1

if [ -z "$1" ]; then
  echo "usage: $0 package_name"
  exit 1
fi

if [ -z "$INSTALL" ] ; then
  echo "error: '\$INSTALL' not set! this script is not intended to be run manually"
  exit 1
fi

# set defaults
if [ "${1//:/}" != "${1}" ]; then
  PACKAGE_NAME="${1%:*}"
  TARGET="${1#*:}"
else
  PACKAGE_NAME=$1
  TARGET=
fi
[ -z "$TARGET" ] && TARGET="target"

STAMP=$STAMPS_INSTALL/$PACKAGE_NAME/install_$TARGET
mkdir -p $STAMPS_INSTALL/$PACKAGE_NAME

[ -f $STAMP ] && exit 0

if [ -n "$PKG_ARCH" ]; then
  listcontains "$PKG_ARCH" "!$TARGET_ARCH" && exit 0
  listcontains "$PKG_ARCH" "$TARGET_ARCH" || listcontains "$PKG_ARCH" "any" || exit 0
fi

if [ ! -f $PKG_DIR/package.mk ]; then
  printf "$(print_color CLR_ERROR "${PACKAGE_NAME}: no package.mk file found")\n"
  exit 1
fi

$SCRIPTS/build $@

printf "%${BUILD_INDENT}c $(print_color CLR_INSTALL "INSTALL")    $PACKAGE_NAME $(print_color CLR_TARGET "($TARGET)")\n" ' '>&$SILENT_OUT
export BUILD_INDENT=$((${BUILD_INDENT:-1}+$BUILD_INDENT_SIZE))

if [ "$TARGET" = target ] ; then
  for p in $PKG_DEPENDS_TARGET; do
    $SCRIPTS/install $p
  done
elif [ "$TARGET" = init ] ; then
  for p in $PKG_DEPENDS_INIT; do
    $SCRIPTS/install $p
  done
  INSTALL=$BUILD/initramfs
fi

mkdir -p $INSTALL

if [ "$TARGET" = target ] ; then
  if [ -d $PKG_DIR/profile.d ]; then
    mkdir -p $INSTALL/etc/profile.d
    cp $PKG_DIR/profile.d/*.conf $INSTALL/etc/profile.d/
  fi

  if [ -d $PKG_DIR/tmpfiles.d ]; then
    mkdir -p $INSTALL/usr/lib/tmpfiles.d
    cp $PKG_DIR/tmpfiles.d/*.conf $INSTALL/usr/lib/tmpfiles.d
  fi

  if [ -d $PKG_DIR/system.d ]; then
    mkdir -p $INSTALL/usr/lib/systemd/system
    cp $PKG_DIR/system.d/*.* $INSTALL/usr/lib/systemd/system
  fi

  if [ -d $PKG_DIR/udev.d ]; then
    mkdir -p $INSTALL/usr/lib/udev/rules.d
    cp $PKG_DIR/udev.d/*.rules $INSTALL/usr/lib/udev/rules.d
  fi

  if [ -d $PKG_DIR/sleep.d ]; then
    mkdir -p $INSTALL/usr/lib/systemd/system-sleep/
    cp $PKG_DIR/sleep.d/* $INSTALL/usr/lib/systemd/system-sleep/
  fi

  if [ -d $PKG_DIR/sleep.d.serial ]; then
    mkdir -p $INSTALL/usr/lib/systemd/system-sleep.serial
    cp $PKG_DIR/sleep.d.serial/* $INSTALL/usr/lib/systemd/system-sleep.serial
  fi

  if [ -d $PKG_DIR/sysctl.d ]; then
    mkdir -p $INSTALL/usr/lib/sysctl.d/
    cp $PKG_DIR/sysctl.d/*.conf $INSTALL/usr/lib/sysctl.d/
  fi

  if [ -d $PKG_DIR/modules-load.d ]; then
    mkdir -p $INSTALL/usr/lib/modules-load.d/
    cp $PKG_DIR/modules-load.d/*.conf $INSTALL/usr/lib/modules-load.d/
  fi

  if [ -d $PKG_DIR/sysconf.d ]; then
    mkdir -p $INSTALL/etc/sysconf.d
    cp $PKG_DIR/sysconf.d/*.conf $INSTALL/etc/sysconf.d
  fi

  if [ -d $PKG_DIR/debug.d ]; then
    mkdir -p $INSTALL/usr/share/debugconf
    cp $PKG_DIR/debug.d/*.conf $INSTALL/usr/share/debugconf
  fi

  if [ -d $PKG_DIR/modprobe.d ]; then
    mkdir -p $INSTALL/usr/lib/modprobe.d
    cp $PKG_DIR/modprobe.d/*.conf $INSTALL/usr/lib/modprobe.d
  fi
fi

# unset functions
unset -f pre_install
unset -f post_install

# include buildfile
. $PKG_DIR/package.mk

# install
if [ "$TARGET" = target ] ; then
  if [ "$(type -t pre_install)" = "function" ]; then
    pre_install
  fi
fi

if [ "$TARGET" = "target" -a -d $PKG_BUILD/.install_pkg ]; then
  mkdir -p $INSTALL
  cp -PR $PKG_BUILD/.install_pkg/* $INSTALL
elif [ "$TARGET" = "init" -a -d $PKG_BUILD/.install_init ]; then
  mkdir -p $INSTALL
  cp -PR $PKG_BUILD/.install_init/* $INSTALL
fi

if [ "$TARGET" = target ] ; then
  if [ "$(type -t post_install)" = "function" ]; then
    post_install
  fi
fi

touch $STAMP
